
F070RbNrf24l01PaLnaUsage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003920  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a54  08003a54  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a54  08003a54  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a54  08003a54  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a54  08003a54  00013a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000006c  08003ac8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08003ac8  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000060a8  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001818  00000000  00000000  0002617f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  00027998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000568  00000000  00000000  000280f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010e94  00000000  00000000  00028658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c48  00000000  00000000  000394ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00060a38  00000000  00000000  00042134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fe0  00000000  00000000  000a2b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000a4b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039c8 	.word	0x080039c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080039c8 	.word	0x080039c8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fde8 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f82e 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8c2 	bl	80003c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000244:	f000 f876 	bl	8000334 <MX_SPI1_Init>
#ifdef RECEIVER
  	nrf24l01p_rx_init(2500, _1Mbps);
#endif

 #ifdef TRANSMITTER
	nrf24l01p_tx_init(2500, _1Mbps);
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <main+0x5c>)
 800024a:	2100      	movs	r1, #0
 800024c:	0018      	movs	r0, r3
 800024e:	f000 f9ef 	bl	8000630 <nrf24l01p_tx_init>
	sayac++;
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <main+0x60>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	1c5a      	adds	r2, r3, #1
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <main+0x60>)
 800025a:	601a      	str	r2, [r3, #0]
	  // Nothing to do
#endif

#ifdef TRANSMITTER

	  nrf24l01p_tx_transmit(tx_data);
 800025c:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <main+0x64>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fa13 	bl	800068c <nrf24l01p_tx_transmit>
	  tx_data++;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <main+0x64>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	3301      	adds	r3, #1
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <main+0x64>)
 8000270:	701a      	strb	r2, [r3, #0]
	  sayac++;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <main+0x60>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	1c5a      	adds	r2, r3, #1
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <main+0x60>)
 800027a:	601a      	str	r2, [r3, #0]
	  HAL_Delay(400);
 800027c:	23c8      	movs	r3, #200	; 0xc8
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fe27 	bl	8000ed4 <HAL_Delay>
#endif

	  HAL_Delay(100);
 8000286:	2064      	movs	r0, #100	; 0x64
 8000288:	f000 fe24 	bl	8000ed4 <HAL_Delay>
	  nrf24l01p_tx_transmit(tx_data);
 800028c:	e7e6      	b.n	800025c <main+0x28>
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	000009c4 	.word	0x000009c4
 8000294:	200000ec 	.word	0x200000ec
 8000298:	20000000 	.word	0x20000000

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b091      	sub	sp, #68	; 0x44
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2410      	movs	r4, #16
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	2330      	movs	r3, #48	; 0x30
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f002 fd41 	bl	8002d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	003b      	movs	r3, r7
 80002b4:	0018      	movs	r0, r3
 80002b6:	2310      	movs	r3, #16
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f002 fd3a 	bl	8002d34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	0021      	movs	r1, r4
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2202      	movs	r2, #2
 80002c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2201      	movs	r2, #1
 80002cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2210      	movs	r2, #16
 80002d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2202      	movs	r2, #2
 80002d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	0212      	lsls	r2, r2, #8
 80002e0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	0352      	lsls	r2, r2, #13
 80002e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 f89a 	bl	800142c <HAL_RCC_OscConfig>
 80002f8:	1e03      	subs	r3, r0, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002fc:	f000 f900 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	003b      	movs	r3, r7
 8000302:	2207      	movs	r2, #7
 8000304:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	003b      	movs	r3, r7
 8000308:	2202      	movs	r2, #2
 800030a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	003b      	movs	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	003b      	movs	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000318:	003b      	movs	r3, r7
 800031a:	2101      	movs	r1, #1
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fba3 	bl	8001a68 <HAL_RCC_ClockConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000326:	f000 f8eb 	bl	8000500 <Error_Handler>
  }
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b011      	add	sp, #68	; 0x44
 8000330:	bd90      	pop	{r4, r7, pc}
	...

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_SPI1_Init+0x88>)
 800033a:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <MX_SPI1_Init+0x8c>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_SPI1_Init+0x88>)
 8000340:	2282      	movs	r2, #130	; 0x82
 8000342:	0052      	lsls	r2, r2, #1
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_SPI1_Init+0x88>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_SPI1_Init+0x88>)
 800034e:	22c0      	movs	r2, #192	; 0xc0
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000354:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_SPI1_Init+0x88>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_SPI1_Init+0x88>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_SPI1_Init+0x88>)
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	0092      	lsls	r2, r2, #2
 8000366:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_SPI1_Init+0x88>)
 800036a:	2220      	movs	r2, #32
 800036c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_SPI1_Init+0x88>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_SPI1_Init+0x88>)
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MX_SPI1_Init+0x88>)
 800037c:	2200      	movs	r2, #0
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_SPI1_Init+0x88>)
 8000382:	2207      	movs	r2, #7
 8000384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <MX_SPI1_Init+0x88>)
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_SPI1_Init+0x88>)
 800038e:	2208      	movs	r2, #8
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <MX_SPI1_Init+0x88>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fc8d 	bl	8001cb4 <HAL_SPI_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d006      	beq.n	80003ac <MX_SPI1_Init+0x78>
  {
    Error_Handler();
 800039e:	f000 f8af 	bl	8000500 <Error_Handler>
    printf("sikinti var.");
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_SPI1_Init+0x90>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f002 fc69 	bl	8002c7c <iprintf>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003aa:	e003      	b.n	80003b4 <MX_SPI1_Init+0x80>
	  printf("sikinti var.");
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <MX_SPI1_Init+0x90>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f002 fc64 	bl	8002c7c <iprintf>
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	20000088 	.word	0x20000088
 80003c0:	40013000 	.word	0x40013000
 80003c4:	080039e0 	.word	0x080039e0

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b590      	push	{r4, r7, lr}
 80003ca:	b089      	sub	sp, #36	; 0x24
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	240c      	movs	r4, #12
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	0018      	movs	r0, r3
 80003d4:	2314      	movs	r3, #20
 80003d6:	001a      	movs	r2, r3
 80003d8:	2100      	movs	r1, #0
 80003da:	f002 fcab 	bl	8002d34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003de:	4b3e      	ldr	r3, [pc, #248]	; (80004d8 <MX_GPIO_Init+0x110>)
 80003e0:	695a      	ldr	r2, [r3, #20]
 80003e2:	4b3d      	ldr	r3, [pc, #244]	; (80004d8 <MX_GPIO_Init+0x110>)
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	03c9      	lsls	r1, r1, #15
 80003e8:	430a      	orrs	r2, r1
 80003ea:	615a      	str	r2, [r3, #20]
 80003ec:	4b3a      	ldr	r3, [pc, #232]	; (80004d8 <MX_GPIO_Init+0x110>)
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	03db      	lsls	r3, r3, #15
 80003f4:	4013      	ands	r3, r2
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fa:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <MX_GPIO_Init+0x110>)
 80003fc:	695a      	ldr	r2, [r3, #20]
 80003fe:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <MX_GPIO_Init+0x110>)
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	0289      	lsls	r1, r1, #10
 8000404:	430a      	orrs	r2, r1
 8000406:	615a      	str	r2, [r3, #20]
 8000408:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <MX_GPIO_Init+0x110>)
 800040a:	695a      	ldr	r2, [r3, #20]
 800040c:	2380      	movs	r3, #128	; 0x80
 800040e:	029b      	lsls	r3, r3, #10
 8000410:	4013      	ands	r3, r2
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <MX_GPIO_Init+0x110>)
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <MX_GPIO_Init+0x110>)
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	0309      	lsls	r1, r1, #12
 8000420:	430a      	orrs	r2, r1
 8000422:	615a      	str	r2, [r3, #20]
 8000424:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <MX_GPIO_Init+0x110>)
 8000426:	695a      	ldr	r2, [r3, #20]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	031b      	lsls	r3, r3, #12
 800042c:	4013      	ands	r3, r2
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000432:	2390      	movs	r3, #144	; 0x90
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2200      	movs	r2, #0
 8000438:	2110      	movs	r1, #16
 800043a:	0018      	movs	r0, r3
 800043c:	f000 ffbc 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	4825      	ldr	r0, [pc, #148]	; (80004dc <MX_GPIO_Init+0x114>)
 8000446:	2200      	movs	r2, #0
 8000448:	0019      	movs	r1, r3
 800044a:	f000 ffb5 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2204      	movs	r2, #4
 8000452:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	22c4      	movs	r2, #196	; 0xc4
 8000458:	0392      	lsls	r2, r2, #14
 800045a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	193a      	adds	r2, r7, r4
 8000464:	2390      	movs	r3, #144	; 0x90
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	0011      	movs	r1, r2
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fe34 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2210      	movs	r2, #16
 8000474:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2201      	movs	r2, #1
 800047a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	193a      	adds	r2, r7, r4
 800048a:	2390      	movs	r3, #144	; 0x90
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fe21 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000496:	0021      	movs	r1, r4
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2201      	movs	r2, #1
 80004a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	4a09      	ldr	r2, [pc, #36]	; (80004dc <MX_GPIO_Init+0x114>)
 80004b6:	0019      	movs	r1, r3
 80004b8:	0010      	movs	r0, r2
 80004ba:	f000 fe0d 	bl	80010d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	2006      	movs	r0, #6
 80004c4:	f000 fdd6 	bl	8001074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80004c8:	2006      	movs	r0, #6
 80004ca:	f000 fde8 	bl	800109e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b009      	add	sp, #36	; 0x24
 80004d4:	bd90      	pop	{r4, r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000
 80004dc:	48000800 	.word	0x48000800

080004e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	0002      	movs	r2, r0
 80004e8:	1dbb      	adds	r3, r7, #6
 80004ea:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80004ec:	1dbb      	adds	r3, r7, #6
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d101      	bne.n	80004f8 <HAL_GPIO_EXTI_Callback+0x18>
#ifdef RECEIVER
	    nrf24l01p_rx_receive(rx_data);
#endif

#ifdef TRANSMITTER
		nrf24l01p_tx_irq();
 80004f4:	f000 f8d6 	bl	80006a4 <nrf24l01p_tx_irq>
#endif
	}

}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b002      	add	sp, #8
 80004fe:	bd80      	pop	{r7, pc}

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	e7fe      	b.n	8000508 <Error_Handler+0x8>
	...

0800050c <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, 1);
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <cs_high+0x18>)
 8000516:	2201      	movs	r2, #1
 8000518:	0019      	movs	r1, r3
 800051a:	f000 ff4d 	bl	80013b8 <HAL_GPIO_WritePin>
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	48000800 	.word	0x48000800

08000528 <cs_low>:

static void cs_low()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, 0);
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <cs_low+0x18>)
 8000532:	2200      	movs	r2, #0
 8000534:	0019      	movs	r1, r3
 8000536:	f000 ff3f 	bl	80013b8 <HAL_GPIO_WritePin>
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	48000800 	.word	0x48000800

08000544 <ce_high>:

static void ce_high()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, 1);
 8000548:	2390      	movs	r3, #144	; 0x90
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	2201      	movs	r2, #1
 800054e:	2110      	movs	r1, #16
 8000550:	0018      	movs	r0, r3
 8000552:	f000 ff31 	bl	80013b8 <HAL_GPIO_WritePin>
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <ce_low>:

static void ce_low()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, 0);
 8000560:	2390      	movs	r3, #144	; 0x90
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	2200      	movs	r2, #0
 8000566:	2110      	movs	r1, #16
 8000568:	0018      	movs	r0, r3
 800056a:	f000 ff25 	bl	80013b8 <HAL_GPIO_WritePin>
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000580:	240f      	movs	r4, #15
 8000582:	193b      	adds	r3, r7, r4
 8000584:	1dfa      	adds	r2, r7, #7
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	701a      	strb	r2, [r3, #0]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800058a:	f7ff ffcd 	bl	8000528 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800058e:	230e      	movs	r3, #14
 8000590:	18fa      	adds	r2, r7, r3
 8000592:	1939      	adds	r1, r7, r4
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <read_register+0x50>)
 8000596:	23fa      	movs	r3, #250	; 0xfa
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2301      	movs	r3, #1
 800059e:	f001 fef3 	bl	8002388 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80005a2:	23fa      	movs	r3, #250	; 0xfa
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	240d      	movs	r4, #13
 80005a8:	1939      	adds	r1, r7, r4
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <read_register+0x50>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	f001 fd99 	bl	80020e4 <HAL_SPI_Receive>
    cs_high();
 80005b2:	f7ff ffab 	bl	800050c <cs_high>

    return read_val;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	781b      	ldrb	r3, [r3, #0]
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	b005      	add	sp, #20
 80005c0:	bd90      	pop	{r4, r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	20000088 	.word	0x20000088

080005c8 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	0002      	movs	r2, r0
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	1dbb      	adds	r3, r7, #6
 80005d6:	1c0a      	adds	r2, r1, #0
 80005d8:	701a      	strb	r2, [r3, #0]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2220      	movs	r2, #32
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	250f      	movs	r5, #15
 80005e6:	197b      	adds	r3, r7, r5
 80005e8:	701a      	strb	r2, [r3, #0]
    uint8_t status;
    uint8_t write_val = value;
 80005ea:	240d      	movs	r4, #13
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	1dba      	adds	r2, r7, #6
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	701a      	strb	r2, [r3, #0]

    cs_low();
 80005f4:	f7ff ff98 	bl	8000528 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80005f8:	230e      	movs	r3, #14
 80005fa:	18fa      	adds	r2, r7, r3
 80005fc:	1979      	adds	r1, r7, r5
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <write_register+0x64>)
 8000600:	23fa      	movs	r3, #250	; 0xfa
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	f001 febe 	bl	8002388 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 800060c:	23fa      	movs	r3, #250	; 0xfa
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	1939      	adds	r1, r7, r4
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <write_register+0x64>)
 8000614:	2201      	movs	r2, #1
 8000616:	f001 fc05 	bl	8001e24 <HAL_SPI_Transmit>
    cs_high();
 800061a:	f7ff ff77 	bl	800050c <cs_high>

    return write_val;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	781b      	ldrb	r3, [r3, #0]
}
 8000622:	0018      	movs	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	b004      	add	sp, #16
 8000628:	bdb0      	pop	{r4, r5, r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	20000088 	.word	0x20000088

08000630 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	0002      	movs	r2, r0
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	801a      	strh	r2, [r3, #0]
 800063c:	1d7b      	adds	r3, r7, #5
 800063e:	1c0a      	adds	r2, r1, #0
 8000640:	701a      	strb	r2, [r3, #0]
    nrf24l01p_reset();
 8000642:	f000 f84a 	bl	80006da <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8000646:	f000 f89d 	bl	8000784 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 800064a:	f000 f95b 	bl	8000904 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 800064e:	1dbb      	adds	r3, r7, #6
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fa06 	bl	8000a64 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000658:	1d7b      	adds	r3, r7, #5
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fa43 	bl	8000ae8 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000662:	2003      	movs	r0, #3
 8000664:	f000 fa1a 	bl	8000a9c <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 f964 	bl	8000936 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800066e:	2005      	movs	r0, #5
 8000670:	f000 f990 	bl	8000994 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f99f 	bl	80009b8 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 800067a:	20fa      	movs	r0, #250	; 0xfa
 800067c:	f000 f9c2 	bl	8000a04 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000680:	f7ff ff60 	bl	8000544 <ce_high>
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b002      	add	sp, #8
 800068a:	bd80      	pop	{r7, pc}

0800068c <nrf24l01p_tx_transmit>:

    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f88e 	bl	80007b8 <nrf24l01p_write_tx_fifo>
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 80006aa:	1dfc      	adds	r4, r7, #7
 80006ac:	f000 f8de 	bl	800086c <nrf24l01p_get_status>
 80006b0:	0003      	movs	r3, r0
 80006b2:	7023      	strb	r3, [r4, #0]
    tx_ds &= 0x20;
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	1dfa      	adds	r2, r7, #7
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	2120      	movs	r1, #32
 80006bc:	400a      	ands	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]

    if(tx_ds)
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <nrf24l01p_tx_irq+0x2a>
    {   
        // TX_DS
        //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
        nrf24l01p_clear_tx_ds();
 80006c8:	f000 f8ec 	bl	80008a4 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 80006cc:	e001      	b.n	80006d2 <nrf24l01p_tx_irq+0x2e>
        nrf24l01p_clear_max_rt();
 80006ce:	f000 f901 	bl	80008d4 <nrf24l01p_clear_max_rt>
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b003      	add	sp, #12
 80006d8:	bd90      	pop	{r4, r7, pc}

080006da <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80006de:	f7ff ff15 	bl	800050c <cs_high>
    ce_low();
 80006e2:	f7ff ff3b 	bl	800055c <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80006e6:	2108      	movs	r1, #8
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff6d 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80006ee:	213f      	movs	r1, #63	; 0x3f
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff ff69 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80006f6:	2103      	movs	r1, #3
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ff65 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80006fe:	2103      	movs	r1, #3
 8000700:	2003      	movs	r0, #3
 8000702:	f7ff ff61 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000706:	2103      	movs	r1, #3
 8000708:	2004      	movs	r0, #4
 800070a:	f7ff ff5d 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800070e:	2102      	movs	r1, #2
 8000710:	2005      	movs	r0, #5
 8000712:	f7ff ff59 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000716:	2107      	movs	r1, #7
 8000718:	2006      	movs	r0, #6
 800071a:	f7ff ff55 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800071e:	217e      	movs	r1, #126	; 0x7e
 8000720:	2007      	movs	r0, #7
 8000722:	f7ff ff51 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000726:	2100      	movs	r1, #0
 8000728:	2011      	movs	r0, #17
 800072a:	f7ff ff4d 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800072e:	2100      	movs	r1, #0
 8000730:	2011      	movs	r0, #17
 8000732:	f7ff ff49 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000736:	2100      	movs	r1, #0
 8000738:	2012      	movs	r0, #18
 800073a:	f7ff ff45 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800073e:	2100      	movs	r1, #0
 8000740:	2013      	movs	r0, #19
 8000742:	f7ff ff41 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000746:	2100      	movs	r1, #0
 8000748:	2014      	movs	r0, #20
 800074a:	f7ff ff3d 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800074e:	2100      	movs	r1, #0
 8000750:	2015      	movs	r0, #21
 8000752:	f7ff ff39 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000756:	2100      	movs	r1, #0
 8000758:	2016      	movs	r0, #22
 800075a:	f7ff ff35 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800075e:	2111      	movs	r1, #17
 8000760:	2017      	movs	r0, #23
 8000762:	f7ff ff31 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000766:	2100      	movs	r1, #0
 8000768:	201c      	movs	r0, #28
 800076a:	f7ff ff2d 	bl	80005c8 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 800076e:	2100      	movs	r1, #0
 8000770:	201d      	movs	r0, #29
 8000772:	f7ff ff29 	bl	80005c8 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000776:	f000 f845 	bl	8000804 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 800077a:	f000 f85d 	bl	8000838 <nrf24l01p_flush_tx_fifo>
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800078a:	1dfc      	adds	r4, r7, #7
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fef1 	bl	8000574 <read_register>
 8000792:	0003      	movs	r3, r0
 8000794:	7023      	strb	r3, [r4, #0]
    new_config &= 0xFE;
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	1dfa      	adds	r2, r7, #7
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	2101      	movs	r1, #1
 800079e:	438a      	bics	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	0019      	movs	r1, r3
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff ff0d 	bl	80005c8 <write_register>
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b003      	add	sp, #12
 80007b4:	bd90      	pop	{r4, r7, pc}
	...

080007b8 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af02      	add	r7, sp, #8
 80007be:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80007c0:	240f      	movs	r4, #15
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	22a0      	movs	r2, #160	; 0xa0
 80007c6:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    cs_low();
 80007c8:	f7ff feae 	bl	8000528 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80007cc:	250e      	movs	r5, #14
 80007ce:	197a      	adds	r2, r7, r5
 80007d0:	1939      	adds	r1, r7, r4
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <nrf24l01p_write_tx_fifo+0x48>)
 80007d4:	23fa      	movs	r3, #250	; 0xfa
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2301      	movs	r3, #1
 80007dc:	f001 fdd4 	bl	8002388 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80007e0:	23fa      	movs	r3, #250	; 0xfa
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	6879      	ldr	r1, [r7, #4]
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <nrf24l01p_write_tx_fifo+0x48>)
 80007e8:	2208      	movs	r2, #8
 80007ea:	f001 fb1b 	bl	8001e24 <HAL_SPI_Transmit>
    cs_high(); 
 80007ee:	f7ff fe8d 	bl	800050c <cs_high>

    return status;
 80007f2:	197b      	adds	r3, r7, r5
 80007f4:	781b      	ldrb	r3, [r3, #0]
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b004      	add	sp, #16
 80007fc:	bdb0      	pop	{r4, r5, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000088 	.word	0x20000088

08000804 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	22e2      	movs	r2, #226	; 0xe2
 800080e:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    cs_low();
 8000810:	f7ff fe8a 	bl	8000528 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000814:	1dba      	adds	r2, r7, #6
 8000816:	1df9      	adds	r1, r7, #7
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <nrf24l01p_flush_rx_fifo+0x30>)
 800081a:	23fa      	movs	r3, #250	; 0xfa
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	f001 fdb1 	bl	8002388 <HAL_SPI_TransmitReceive>
    cs_high();
 8000826:	f7ff fe71 	bl	800050c <cs_high>
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	20000088 	.word	0x20000088

08000838 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	22e1      	movs	r2, #225	; 0xe1
 8000842:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    cs_low();
 8000844:	f7ff fe70 	bl	8000528 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000848:	1dba      	adds	r2, r7, #6
 800084a:	1df9      	adds	r1, r7, #7
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <nrf24l01p_flush_tx_fifo+0x30>)
 800084e:	23fa      	movs	r3, #250	; 0xfa
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	f001 fd97 	bl	8002388 <HAL_SPI_TransmitReceive>
    cs_high();
 800085a:	f7ff fe57 	bl	800050c <cs_high>
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	20000088 	.word	0x20000088

0800086c <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	22ff      	movs	r2, #255	; 0xff
 8000876:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    cs_low();
 8000878:	f7ff fe56 	bl	8000528 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800087c:	1dba      	adds	r2, r7, #6
 800087e:	1df9      	adds	r1, r7, #7
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <nrf24l01p_get_status+0x34>)
 8000882:	23fa      	movs	r3, #250	; 0xfa
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2301      	movs	r3, #1
 800088a:	f001 fd7d 	bl	8002388 <HAL_SPI_TransmitReceive>
    cs_high(); 
 800088e:	f7ff fe3d 	bl	800050c <cs_high>

    return status;
 8000892:	1dbb      	adds	r3, r7, #6
 8000894:	781b      	ldrb	r3, [r3, #0]
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000088 	.word	0x20000088

080008a4 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80008aa:	1dfc      	adds	r4, r7, #7
 80008ac:	f7ff ffde 	bl	800086c <nrf24l01p_get_status>
 80008b0:	0003      	movs	r3, r0
 80008b2:	7023      	strb	r3, [r4, #0]
    new_status |= 0x20;
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	1dfa      	adds	r2, r7, #7
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	2120      	movs	r1, #32
 80008bc:	430a      	orrs	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	0019      	movs	r1, r3
 80008c6:	2007      	movs	r0, #7
 80008c8:	f7ff fe7e 	bl	80005c8 <write_register>
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b003      	add	sp, #12
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80008da:	1dfc      	adds	r4, r7, #7
 80008dc:	f7ff ffc6 	bl	800086c <nrf24l01p_get_status>
 80008e0:	0003      	movs	r3, r0
 80008e2:	7023      	strb	r3, [r4, #0]
    new_status |= 0x10;
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	1dfa      	adds	r2, r7, #7
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	2110      	movs	r1, #16
 80008ec:	430a      	orrs	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	0019      	movs	r1, r3
 80008f6:	2007      	movs	r0, #7
 80008f8:	f7ff fe66 	bl	80005c8 <write_register>
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b003      	add	sp, #12
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800090a:	1dfc      	adds	r4, r7, #7
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff fe31 	bl	8000574 <read_register>
 8000912:	0003      	movs	r3, r0
 8000914:	7023      	strb	r3, [r4, #0]
    new_config |= 1 << 1;
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	1dfa      	adds	r2, r7, #7
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	2102      	movs	r1, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	0019      	movs	r1, r3
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff fe4d 	bl	80005c8 <write_register>
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b003      	add	sp, #12
 8000934:	bd90      	pop	{r4, r7, pc}

08000936 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000936:	b590      	push	{r4, r7, lr}
 8000938:	b085      	sub	sp, #20
 800093a:	af00      	add	r7, sp, #0
 800093c:	0002      	movs	r2, r0
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	701a      	strb	r2, [r3, #0]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000942:	230f      	movs	r3, #15
 8000944:	18fc      	adds	r4, r7, r3
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fe14 	bl	8000574 <read_register>
 800094c:	0003      	movs	r3, r0
 800094e:	7023      	strb	r3, [r4, #0]
    
    switch(bytes)
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d002      	beq.n	800095e <nrf24l01p_set_crc_length+0x28>
 8000958:	2b02      	cmp	r3, #2
 800095a:	d008      	beq.n	800096e <nrf24l01p_set_crc_length+0x38>
 800095c:	e00f      	b.n	800097e <nrf24l01p_set_crc_length+0x48>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 800095e:	220f      	movs	r2, #15
 8000960:	18bb      	adds	r3, r7, r2
 8000962:	18ba      	adds	r2, r7, r2
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	2104      	movs	r1, #4
 8000968:	438a      	bics	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
            break;
 800096c:	e007      	b.n	800097e <nrf24l01p_set_crc_length+0x48>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 800096e:	220f      	movs	r2, #15
 8000970:	18bb      	adds	r3, r7, r2
 8000972:	18ba      	adds	r2, r7, r2
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	2104      	movs	r1, #4
 8000978:	430a      	orrs	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
            break;
 800097c:	46c0      	nop			; (mov r8, r8)
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800097e:	230f      	movs	r3, #15
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	0019      	movs	r1, r3
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fe1e 	bl	80005c8 <write_register>
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b005      	add	sp, #20
 8000992:	bd90      	pop	{r4, r7, pc}

08000994 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	701a      	strb	r2, [r3, #0]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	3b02      	subs	r3, #2
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	0019      	movs	r1, r3
 80009aa:	2003      	movs	r0, #3
 80009ac:	f7ff fe0c 	bl	80005c8 <write_register>
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 80009b8:	b5b0      	push	{r4, r5, r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	701a      	strb	r2, [r3, #0]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80009c4:	250f      	movs	r5, #15
 80009c6:	197c      	adds	r4, r7, r5
 80009c8:	2004      	movs	r0, #4
 80009ca:	f7ff fdd3 	bl	8000574 <read_register>
 80009ce:	0003      	movs	r3, r0
 80009d0:	7023      	strb	r3, [r4, #0]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80009d2:	0028      	movs	r0, r5
 80009d4:	183b      	adds	r3, r7, r0
 80009d6:	183a      	adds	r2, r7, r0
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	2110      	movs	r1, #16
 80009dc:	4249      	negs	r1, r1
 80009de:	430a      	orrs	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
    new_setup_retr |= cnt;
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	1839      	adds	r1, r7, r0
 80009e6:	1dfa      	adds	r2, r7, #7
 80009e8:	7809      	ldrb	r1, [r1, #0]
 80009ea:	7812      	ldrb	r2, [r2, #0]
 80009ec:	430a      	orrs	r2, r1
 80009ee:	701a      	strb	r2, [r3, #0]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	0019      	movs	r1, r3
 80009f6:	2004      	movs	r0, #4
 80009f8:	f7ff fde6 	bl	80005c8 <write_register>
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b004      	add	sp, #16
 8000a02:	bdb0      	pop	{r4, r5, r7, pc}

08000a04 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8000a04:	b5b0      	push	{r4, r5, r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	1dbb      	adds	r3, r7, #6
 8000a0e:	801a      	strh	r2, [r3, #0]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000a10:	250f      	movs	r5, #15
 8000a12:	197c      	adds	r4, r7, r5
 8000a14:	2004      	movs	r0, #4
 8000a16:	f7ff fdad 	bl	8000574 <read_register>
 8000a1a:	0003      	movs	r3, r0
 8000a1c:	7023      	strb	r3, [r4, #0]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8000a1e:	002c      	movs	r4, r5
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	193a      	adds	r2, r7, r4
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	210f      	movs	r1, #15
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	701a      	strb	r2, [r3, #0]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8000a2c:	1dbb      	adds	r3, r7, #6
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	21fa      	movs	r1, #250	; 0xfa
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff fb72 	bl	800011c <__udivsi3>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	b25a      	sxtb	r2, r3
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b25a      	sxtb	r2, r3
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	701a      	strb	r2, [r3, #0]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	0019      	movs	r1, r3
 8000a56:	2004      	movs	r0, #4
 8000a58:	f7ff fdb6 	bl	80005c8 <write_register>
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b004      	add	sp, #16
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}

08000a64 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	1dbb      	adds	r3, r7, #6
 8000a6e:	801a      	strh	r2, [r3, #0]
	uint16_t new_rf_ch = MHz - 2400;
 8000a70:	210e      	movs	r1, #14
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	1dba      	adds	r2, r7, #6
 8000a76:	8812      	ldrh	r2, [r2, #0]
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <nrf24l01p_set_rf_channel+0x34>)
 8000a7a:	4684      	mov	ip, r0
 8000a7c:	4462      	add	r2, ip
 8000a7e:	801a      	strh	r2, [r3, #0]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	0019      	movs	r1, r3
 8000a88:	2005      	movs	r0, #5
 8000a8a:	f7ff fd9d 	bl	80005c8 <write_register>
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	fffff6a0 	.word	0xfffff6a0

08000a9c <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f7ff fd63 	bl	8000574 <read_register>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	183b      	adds	r3, r7, r0
 8000ab6:	2206      	movs	r2, #6
 8000ab8:	4391      	bics	r1, r2
 8000aba:	000a      	movs	r2, r1
 8000abc:	701a      	strb	r2, [r3, #0]
    new_rf_setup |= (dBm << 1);
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	183b      	adds	r3, r7, r0
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b25a      	sxtb	r2, r3
 8000ad0:	183b      	adds	r3, r7, r0
 8000ad2:	701a      	strb	r2, [r3, #0]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000ad4:	183b      	adds	r3, r7, r0
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	0019      	movs	r1, r3
 8000ada:	2006      	movs	r0, #6
 8000adc:	f7ff fd74 	bl	80005c8 <write_register>
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b004      	add	sp, #16
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	0002      	movs	r2, r0
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	701a      	strb	r2, [r3, #0]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8000af4:	2006      	movs	r0, #6
 8000af6:	f7ff fd3d 	bl	8000574 <read_register>
 8000afa:	0003      	movs	r3, r0
 8000afc:	0019      	movs	r1, r3
 8000afe:	200f      	movs	r0, #15
 8000b00:	183b      	adds	r3, r7, r0
 8000b02:	2228      	movs	r2, #40	; 0x28
 8000b04:	4391      	bics	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	701a      	strb	r2, [r3, #0]
    
    switch(bps)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d00b      	beq.n	8000b2a <nrf24l01p_set_rf_air_data_rate+0x42>
 8000b12:	dc13      	bgt.n	8000b3c <nrf24l01p_set_rf_air_data_rate+0x54>
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d010      	beq.n	8000b3a <nrf24l01p_set_rf_air_data_rate+0x52>
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10f      	bne.n	8000b3c <nrf24l01p_set_rf_air_data_rate+0x54>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8000b1c:	183b      	adds	r3, r7, r0
 8000b1e:	183a      	adds	r2, r7, r0
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	2108      	movs	r1, #8
 8000b24:	430a      	orrs	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
            break;
 8000b28:	e008      	b.n	8000b3c <nrf24l01p_set_rf_air_data_rate+0x54>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	18bb      	adds	r3, r7, r2
 8000b2e:	18ba      	adds	r2, r7, r2
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	2120      	movs	r1, #32
 8000b34:	430a      	orrs	r2, r1
 8000b36:	701a      	strb	r2, [r3, #0]
            break;
 8000b38:	e000      	b.n	8000b3c <nrf24l01p_set_rf_air_data_rate+0x54>
            break;
 8000b3a:	46c0      	nop			; (mov r8, r8)
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0019      	movs	r1, r3
 8000b44:	2006      	movs	r0, #6
 8000b46:	f7ff fd3f 	bl	80005c8 <write_register>
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_SPI_MspInit>:
  /* USER CODE END SPI2_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08b      	sub	sp, #44	; 0x2c
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	2414      	movs	r4, #20
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f002 f8e4 	bl	8002d34 <memset>
  if(spiHandle->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <HAL_SPI_MspInit+0x90>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d131      	bne.n	8000bda <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_SPI_MspInit+0x94>)
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_SPI_MspInit+0x94>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0149      	lsls	r1, r1, #5
 8000b80:	430a      	orrs	r2, r1
 8000b82:	619a      	str	r2, [r3, #24]
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_SPI_MspInit+0x94>)
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	015b      	lsls	r3, r3, #5
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_SPI_MspInit+0x94>)
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_SPI_MspInit+0x94>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	02c9      	lsls	r1, r1, #11
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_SPI_MspInit+0x94>)
 8000ba2:	695a      	ldr	r2, [r3, #20]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	02db      	lsls	r3, r3, #11
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bae:	0021      	movs	r1, r4
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	22e0      	movs	r2, #224	; 0xe0
 8000bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2202      	movs	r2, #2
 8000bba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2205      	movs	r2, #5
 8000bcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_SPI_MspInit+0x98>)
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	0010      	movs	r0, r2
 8000bd6:	f000 fa7f 	bl	80010d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b00b      	add	sp, #44	; 0x2c
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40013000 	.word	0x40013000
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000400 	.word	0x48000400

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	699a      	ldr	r2, [r3, #24]
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	619a      	str	r2, [r3, #24]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	2201      	movs	r2, #1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	69da      	ldr	r2, [r3, #28]
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	0549      	lsls	r1, r1, #21
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	61da      	str	r2, [r3, #28]
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1e:	69da      	ldr	r2, [r3, #28]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	055b      	lsls	r3, r3, #21
 8000c24:	4013      	ands	r3, r2
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	40021000 	.word	0x40021000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f91e 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f000 fbc2 	bl	80013f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e00a      	b.n	8000c9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c88:	e000      	b.n	8000c8c <_read+0x16>
 8000c8a:	bf00      	nop
 8000c8c:	0001      	movs	r1, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	60ba      	str	r2, [r7, #8]
 8000c94:	b2ca      	uxtb	r2, r1
 8000c96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbf0      	blt.n	8000c88 <_read+0x12>
  }

  return len;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b006      	add	sp, #24
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e009      	b.n	8000cd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	60ba      	str	r2, [r7, #8]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	e000      	b.n	8000cd0 <_write+0x20>
 8000cce:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dbf1      	blt.n	8000cc2 <_write+0x12>
  }
  return len;
 8000cde:	687b      	ldr	r3, [r7, #4]
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b006      	add	sp, #24
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_close>:

int _close(int file)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	0192      	lsls	r2, r2, #6
 8000d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_isatty>:

int _isatty(int file)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b004      	add	sp, #16
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f002 f836 	bl	8002de0 <__errno>
 8000d74:	0003      	movs	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	425b      	negs	r3, r3
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	18d2      	adds	r2, r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b006      	add	sp, #24
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20004000 	.word	0x20004000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200000f0 	.word	0x200000f0
 8000da8:	20000248 	.word	0x20000248

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dbc:	f7ff fff6 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopForever+0xe>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopForever+0x16>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000de6:	f002 f801 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dea:	f7ff fa23 	bl	8000234 <main>

08000dee <LoopForever>:

LoopForever:
    b LoopForever
 8000dee:	e7fe      	b.n	8000dee <LoopForever>
  ldr   r0, =_estack
 8000df0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000dfc:	08003a5c 	.word	0x08003a5c
  ldr r2, =_sbss
 8000e00:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e04:	20000244 	.word	0x20000244

08000e08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_IRQHandler>
	...

08000e0c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_Init+0x24>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_Init+0x24>)
 8000e16:	2110      	movs	r1, #16
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f809 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e22:	f7ff fee5 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40022000 	.word	0x40022000

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_InitTick+0x5c>)
 8000e3e:	681c      	ldr	r4, [r3, #0]
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_InitTick+0x60>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	0019      	movs	r1, r3
 8000e46:	23fa      	movs	r3, #250	; 0xfa
 8000e48:	0098      	lsls	r0, r3, #2
 8000e4a:	f7ff f967 	bl	800011c <__udivsi3>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	0019      	movs	r1, r3
 8000e52:	0020      	movs	r0, r4
 8000e54:	f7ff f962 	bl	800011c <__udivsi3>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 f92f 	bl	80010be <HAL_SYSTICK_Config>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e00f      	b.n	8000e88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d80b      	bhi.n	8000e86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2301      	movs	r3, #1
 8000e72:	425b      	negs	r3, r3
 8000e74:	2200      	movs	r2, #0
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 f8fc 	bl	8001074 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_InitTick+0x64>)
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b003      	add	sp, #12
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	20000004 	.word	0x20000004
 8000e94:	2000000c 	.word	0x2000000c
 8000e98:	20000008 	.word	0x20000008

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	18d2      	adds	r2, r2, r3
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_IncTick+0x20>)
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	200000f4 	.word	0x200000f4

08000ec0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	200000f4 	.word	0x200000f4

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff fff0 	bl	8000ec0 <HAL_GetTick>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_Delay+0x44>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	f7ff ffe0 	bl	8000ec0 <HAL_GetTick>
 8000f00:	0002      	movs	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	2000000c 	.word	0x2000000c

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	0002      	movs	r2, r0
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2e:	d809      	bhi.n	8000f44 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	001a      	movs	r2, r3
 8000f36:	231f      	movs	r3, #31
 8000f38:	401a      	ands	r2, r3
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_EnableIRQ+0x30>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4091      	lsls	r1, r2
 8000f40:	000a      	movs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
  }
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	0002      	movs	r2, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b7f      	cmp	r3, #127	; 0x7f
 8000f64:	d828      	bhi.n	8000fb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f66:	4a2f      	ldr	r2, [pc, #188]	; (8001024 <__NVIC_SetPriority+0xd4>)
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	33c0      	adds	r3, #192	; 0xc0
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	589b      	ldr	r3, [r3, r2]
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	400a      	ands	r2, r1
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	21ff      	movs	r1, #255	; 0xff
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	401a      	ands	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	4003      	ands	r3, r0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <__NVIC_SetPriority+0xd4>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	33c0      	adds	r3, #192	; 0xc0
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fb6:	e031      	b.n	800101c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <__NVIC_SetPriority+0xd8>)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3306      	adds	r3, #6
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	18d3      	adds	r3, r2, r3
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1dfa      	adds	r2, r7, #7
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	2203      	movs	r2, #3
 8000fda:	400a      	ands	r2, r1
 8000fdc:	00d2      	lsls	r2, r2, #3
 8000fde:	21ff      	movs	r1, #255	; 0xff
 8000fe0:	4091      	lsls	r1, r2
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	43d2      	mvns	r2, r2
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	4003      	ands	r3, r0
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <__NVIC_SetPriority+0xd8>)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	001c      	movs	r4, r3
 8001008:	230f      	movs	r3, #15
 800100a:	4023      	ands	r3, r4
 800100c:	3b08      	subs	r3, #8
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	430a      	orrs	r2, r1
 8001012:	3306      	adds	r3, #6
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	18c3      	adds	r3, r0, r3
 8001018:	3304      	adds	r3, #4
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b003      	add	sp, #12
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	045b      	lsls	r3, r3, #17
 800103c:	429a      	cmp	r2, r3
 800103e:	d301      	bcc.n	8001044 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001040:	2301      	movs	r3, #1
 8001042:	e010      	b.n	8001066 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <SysTick_Config+0x44>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	3a01      	subs	r2, #1
 800104a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2103      	movs	r1, #3
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff ff7c 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x44>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x44>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	210f      	movs	r1, #15
 8001080:	187b      	adds	r3, r7, r1
 8001082:	1c02      	adds	r2, r0, #0
 8001084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	187b      	adds	r3, r7, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b25b      	sxtb	r3, r3
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	0002      	movs	r2, r0
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff33 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff ffaf 	bl	800102c <SysTick_Config>
 80010ce:	0003      	movs	r3, r0
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	e14f      	b.n	8001388 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4091      	lsls	r1, r2
 80010f2:	000a      	movs	r2, r1
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <HAL_GPIO_Init+0x28>
 80010fe:	e140      	b.n	8001382 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
 8001108:	2b01      	cmp	r3, #1
 800110a:	d005      	beq.n	8001118 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2203      	movs	r2, #3
 8001112:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001114:	2b02      	cmp	r3, #2
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	409a      	lsls	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	2201      	movs	r2, #1
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	4013      	ands	r3, r2
 8001182:	2b03      	cmp	r3, #3
 8001184:	d017      	beq.n	80011b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2203      	movs	r2, #3
 80011bc:	4013      	ands	r3, r2
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d123      	bne.n	800120a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	58d3      	ldr	r3, [r2, r3]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2207      	movs	r2, #7
 80011d4:	4013      	ands	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2107      	movs	r1, #7
 80011ee:	400b      	ands	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	6939      	ldr	r1, [r7, #16]
 8001208:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	43da      	mvns	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2203      	movs	r2, #3
 8001228:	401a      	ands	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	23c0      	movs	r3, #192	; 0xc0
 8001244:	029b      	lsls	r3, r3, #10
 8001246:	4013      	ands	r3, r2
 8001248:	d100      	bne.n	800124c <HAL_GPIO_Init+0x174>
 800124a:	e09a      	b.n	8001382 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124c:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 8001252:	2101      	movs	r1, #1
 8001254:	430a      	orrs	r2, r1
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	589b      	ldr	r3, [r3, r2]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2203      	movs	r2, #3
 8001276:	4013      	ands	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	2390      	movs	r3, #144	; 0x90
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	429a      	cmp	r2, r3
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x1e2>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a44      	ldr	r2, [pc, #272]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x1de>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <HAL_GPIO_Init+0x2d4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x1da>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a42      	ldr	r2, [pc, #264]	; (80013b0 <HAL_GPIO_Init+0x2d8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x1d6>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ae:	2305      	movs	r3, #5
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ba:	2300      	movs	r3, #0
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	2103      	movs	r1, #3
 80012c0:	400a      	ands	r2, r1
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	035b      	lsls	r3, r3, #13
 80012f2:	4013      	ands	r3, r2
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43da      	mvns	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	039b      	lsls	r3, r3, #14
 800131c:	4013      	ands	r3, r2
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	029b      	lsls	r3, r3, #10
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	40da      	lsrs	r2, r3
 8001390:	1e13      	subs	r3, r2, #0
 8001392:	d000      	beq.n	8001396 <HAL_GPIO_Init+0x2be>
 8001394:	e6a8      	b.n	80010e8 <HAL_GPIO_Init+0x10>
  } 
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b006      	add	sp, #24
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000c00 	.word	0x48000c00
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	0008      	movs	r0, r1
 80013c2:	0011      	movs	r1, r2
 80013c4:	1cbb      	adds	r3, r7, #2
 80013c6:	1c02      	adds	r2, r0, #0
 80013c8:	801a      	strh	r2, [r3, #0]
 80013ca:	1c7b      	adds	r3, r7, #1
 80013cc:	1c0a      	adds	r2, r1, #0
 80013ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d0:	1c7b      	adds	r3, r7, #1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d8:	1cbb      	adds	r3, r7, #2
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e2:	1cbb      	adds	r3, r7, #2
 80013e4:	881a      	ldrh	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	0002      	movs	r2, r0
 80013fc:	1dbb      	adds	r3, r7, #6
 80013fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	1dba      	adds	r2, r7, #6
 8001406:	8812      	ldrh	r2, [r2, #0]
 8001408:	4013      	ands	r3, r2
 800140a:	d008      	beq.n	800141e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800140e:	1dba      	adds	r2, r7, #6
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff f861 	bl	80004e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e305      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	4013      	ands	r3, r2
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x1e>
 8001448:	e08d      	b.n	8001566 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800144a:	4bc5      	ldr	r3, [pc, #788]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	220c      	movs	r2, #12
 8001450:	4013      	ands	r3, r2
 8001452:	2b04      	cmp	r3, #4
 8001454:	d00e      	beq.n	8001474 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001456:	4bc2      	ldr	r3, [pc, #776]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	220c      	movs	r2, #12
 800145c:	4013      	ands	r3, r2
 800145e:	2b08      	cmp	r3, #8
 8001460:	d116      	bne.n	8001490 <HAL_RCC_OscConfig+0x64>
 8001462:	4bbf      	ldr	r3, [pc, #764]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	23c0      	movs	r3, #192	; 0xc0
 8001468:	025b      	lsls	r3, r3, #9
 800146a:	401a      	ands	r2, r3
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	025b      	lsls	r3, r3, #9
 8001470:	429a      	cmp	r2, r3
 8001472:	d10d      	bne.n	8001490 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	4bba      	ldr	r3, [pc, #744]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	4013      	ands	r3, r2
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x56>
 8001480:	e070      	b.n	8001564 <HAL_RCC_OscConfig+0x138>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d000      	beq.n	800148c <HAL_RCC_OscConfig+0x60>
 800148a:	e06b      	b.n	8001564 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e2dc      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_OscConfig+0x7c>
 8001498:	4bb1      	ldr	r3, [pc, #708]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4bb0      	ldr	r3, [pc, #704]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0249      	lsls	r1, r1, #9
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e02f      	b.n	8001508 <HAL_RCC_OscConfig+0xdc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x9e>
 80014b0:	4bab      	ldr	r3, [pc, #684]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4baa      	ldr	r3, [pc, #680]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014b6:	49ab      	ldr	r1, [pc, #684]	; (8001764 <HAL_RCC_OscConfig+0x338>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	4ba8      	ldr	r3, [pc, #672]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4ba7      	ldr	r3, [pc, #668]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014c2:	49a9      	ldr	r1, [pc, #676]	; (8001768 <HAL_RCC_OscConfig+0x33c>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e01e      	b.n	8001508 <HAL_RCC_OscConfig+0xdc>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10e      	bne.n	80014f0 <HAL_RCC_OscConfig+0xc4>
 80014d2:	4ba3      	ldr	r3, [pc, #652]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4ba2      	ldr	r3, [pc, #648]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	02c9      	lsls	r1, r1, #11
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	4b9f      	ldr	r3, [pc, #636]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xdc>
 80014f0:	4b9b      	ldr	r3, [pc, #620]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b9a      	ldr	r3, [pc, #616]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014f6:	499b      	ldr	r1, [pc, #620]	; (8001764 <HAL_RCC_OscConfig+0x338>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	4b98      	ldr	r3, [pc, #608]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b97      	ldr	r3, [pc, #604]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001502:	4999      	ldr	r1, [pc, #612]	; (8001768 <HAL_RCC_OscConfig+0x33c>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d014      	beq.n	800153a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fcd6 	bl	8000ec0 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151a:	f7ff fcd1 	bl	8000ec0 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	; 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e28e      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152c:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	029b      	lsls	r3, r3, #10
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0xee>
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fcc1 	bl	8000ec0 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fcbc 	bl	8000ec0 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e279      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b82      	ldr	r3, [pc, #520]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	029b      	lsls	r3, r3, #10
 800155e:	4013      	ands	r3, r2
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x118>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x146>
 8001570:	e06c      	b.n	800164c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001572:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	220c      	movs	r2, #12
 8001578:	4013      	ands	r3, r2
 800157a:	d00e      	beq.n	800159a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157c:	4b78      	ldr	r3, [pc, #480]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	220c      	movs	r2, #12
 8001582:	4013      	ands	r3, r2
 8001584:	2b08      	cmp	r3, #8
 8001586:	d11f      	bne.n	80015c8 <HAL_RCC_OscConfig+0x19c>
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	401a      	ands	r2, r3
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	429a      	cmp	r2, r3
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b71      	ldr	r3, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x184>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e24c      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22f8      	movs	r2, #248	; 0xf8
 80015b6:	4393      	bics	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00da      	lsls	r2, r3, #3
 80015c0:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e041      	b.n	800164c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d024      	beq.n	800161a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b62      	ldr	r3, [pc, #392]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc70 	bl	8000ec0 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fc6b 	bl	8000ec0 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e228      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d0f1      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	22f8      	movs	r2, #248	; 0xf8
 8001608:	4393      	bics	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	00da      	lsls	r2, r3, #3
 8001612:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e018      	b.n	800164c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b51      	ldr	r3, [pc, #324]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001620:	2101      	movs	r1, #1
 8001622:	438a      	bics	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fc4b 	bl	8000ec0 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fc46 	bl	8000ec0 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e203      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d1f1      	bne.n	8001630 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2208      	movs	r2, #8
 8001652:	4013      	ands	r3, r2
 8001654:	d036      	beq.n	80016c4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d019      	beq.n	8001692 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001664:	2101      	movs	r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fc29 	bl	8000ec0 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fc24 	bl	8000ec0 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1e1      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	d0f1      	beq.n	8001674 <HAL_RCC_OscConfig+0x248>
 8001690:	e018      	b.n	80016c4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001692:	4b33      	ldr	r3, [pc, #204]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001696:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001698:	2101      	movs	r1, #1
 800169a:	438a      	bics	r2, r1
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fc0f 	bl	8000ec0 <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fc0a 	bl	8000ec0 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1c7      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d1f1      	bne.n	80016a8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2204      	movs	r2, #4
 80016ca:	4013      	ands	r3, r2
 80016cc:	d100      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2a4>
 80016ce:	e0b5      	b.n	800183c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d0:	201f      	movs	r0, #31
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	055b      	lsls	r3, r3, #21
 80016e0:	4013      	ands	r3, r2
 80016e2:	d110      	bne.n	8001706 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80016e6:	69da      	ldr	r2, [r3, #28]
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0549      	lsls	r1, r1, #21
 80016ee:	430a      	orrs	r2, r1
 80016f0:	61da      	str	r2, [r3, #28]
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	055b      	lsls	r3, r3, #21
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001700:	183b      	adds	r3, r7, r0
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_OscConfig+0x340>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4013      	ands	r3, r2
 8001710:	d11a      	bne.n	8001748 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_RCC_OscConfig+0x340>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_RCC_OscConfig+0x340>)
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	0049      	lsls	r1, r1, #1
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001720:	f7ff fbce 	bl	8000ec0 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff fbc9 	bl	8000ec0 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b64      	cmp	r3, #100	; 0x64
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e186      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x340>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4013      	ands	r3, r2
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d10f      	bne.n	8001770 <HAL_RCC_OscConfig+0x344>
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001752:	6a1a      	ldr	r2, [r3, #32]
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_RCC_OscConfig+0x334>)
 8001756:	2101      	movs	r1, #1
 8001758:	430a      	orrs	r2, r1
 800175a:	621a      	str	r2, [r3, #32]
 800175c:	e036      	b.n	80017cc <HAL_RCC_OscConfig+0x3a0>
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40021000 	.word	0x40021000
 8001764:	fffeffff 	.word	0xfffeffff
 8001768:	fffbffff 	.word	0xfffbffff
 800176c:	40007000 	.word	0x40007000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x366>
 8001778:	4bb6      	ldr	r3, [pc, #728]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	4bb5      	ldr	r3, [pc, #724]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800177e:	2101      	movs	r1, #1
 8001780:	438a      	bics	r2, r1
 8001782:	621a      	str	r2, [r3, #32]
 8001784:	4bb3      	ldr	r3, [pc, #716]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	4bb2      	ldr	r3, [pc, #712]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800178a:	2104      	movs	r1, #4
 800178c:	438a      	bics	r2, r1
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x3a0>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x388>
 800179a:	4bae      	ldr	r3, [pc, #696]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4bad      	ldr	r3, [pc, #692]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	621a      	str	r2, [r3, #32]
 80017a6:	4bab      	ldr	r3, [pc, #684]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4baa      	ldr	r3, [pc, #680]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017ac:	2101      	movs	r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	621a      	str	r2, [r3, #32]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x3a0>
 80017b4:	4ba7      	ldr	r3, [pc, #668]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4ba6      	ldr	r3, [pc, #664]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	438a      	bics	r2, r1
 80017be:	621a      	str	r2, [r3, #32]
 80017c0:	4ba4      	ldr	r3, [pc, #656]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4ba3      	ldr	r3, [pc, #652]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017c6:	2104      	movs	r1, #4
 80017c8:	438a      	bics	r2, r1
 80017ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d014      	beq.n	80017fe <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fb74 	bl	8000ec0 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fb6f 	bl	8000ec0 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a9b      	ldr	r2, [pc, #620]	; (8001a58 <HAL_RCC_OscConfig+0x62c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e12b      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	4b98      	ldr	r3, [pc, #608]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x3b2>
 80017fc:	e013      	b.n	8001826 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb5f 	bl	8000ec0 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	e009      	b.n	800181c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff fb5a 	bl	8000ec0 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	4a91      	ldr	r2, [pc, #580]	; (8001a58 <HAL_RCC_OscConfig+0x62c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e116      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	4b8d      	ldr	r3, [pc, #564]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001826:	231f      	movs	r3, #31
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	4b87      	ldr	r3, [pc, #540]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001836:	4989      	ldr	r1, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x630>)
 8001838:	400a      	ands	r2, r1
 800183a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	4013      	ands	r3, r2
 8001844:	d063      	beq.n	800190e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d12a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800184e:	4b81      	ldr	r3, [pc, #516]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	4b80      	ldr	r3, [pc, #512]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001854:	2104      	movs	r1, #4
 8001856:	430a      	orrs	r2, r1
 8001858:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800185a:	4b7e      	ldr	r3, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800185c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185e:	4b7d      	ldr	r3, [pc, #500]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001860:	2101      	movs	r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fb2b 	bl	8000ec0 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001870:	f7ff fb26 	bl	8000ec0 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0e3      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001882:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d0f1      	beq.n	8001870 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800188c:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	22f8      	movs	r2, #248	; 0xf8
 8001892:	4393      	bics	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	00da      	lsls	r2, r3, #3
 800189c:	4b6d      	ldr	r3, [pc, #436]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
 80018a2:	e034      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	3305      	adds	r3, #5
 80018aa:	d111      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018ac:	4b69      	ldr	r3, [pc, #420]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80018ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b0:	4b68      	ldr	r3, [pc, #416]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80018b2:	2104      	movs	r1, #4
 80018b4:	438a      	bics	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018b8:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80018ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018bc:	22f8      	movs	r2, #248	; 0xf8
 80018be:	4393      	bics	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	00da      	lsls	r2, r3, #3
 80018c8:	4b62      	ldr	r3, [pc, #392]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
 80018ce:	e01e      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018d0:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80018d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d4:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80018d6:	2104      	movs	r1, #4
 80018d8:	430a      	orrs	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018dc:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80018de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e0:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff faea 	bl	8000ec0 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018f2:	f7ff fae5 	bl	8000ec0 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0a2      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d1f1      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <HAL_RCC_OscConfig+0x4ec>
 8001916:	e097      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001918:	4b4e      	ldr	r3, [pc, #312]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	220c      	movs	r2, #12
 800191e:	4013      	ands	r3, r2
 8001920:	2b08      	cmp	r3, #8
 8001922:	d100      	bne.n	8001926 <HAL_RCC_OscConfig+0x4fa>
 8001924:	e06b      	b.n	80019fe <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d14c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b49      	ldr	r3, [pc, #292]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001934:	494a      	ldr	r1, [pc, #296]	; (8001a60 <HAL_RCC_OscConfig+0x634>)
 8001936:	400a      	ands	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fac1 	bl	8000ec0 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fabc 	bl	8000ec0 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e079      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	049b      	lsls	r3, r3, #18
 800195e:	4013      	ands	r3, r2
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	220f      	movs	r2, #15
 8001968:	4393      	bics	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001972:	430a      	orrs	r2, r1
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a3a      	ldr	r2, [pc, #232]	; (8001a64 <HAL_RCC_OscConfig+0x638>)
 800197c:	4013      	ands	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	431a      	orrs	r2, r3
 800198a:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	0449      	lsls	r1, r1, #17
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fa8f 	bl	8000ec0 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff fa8a 	bl	8000ec0 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e047      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	049b      	lsls	r3, r3, #18
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x57c>
 80019c6:	e03f      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80019ce:	4924      	ldr	r1, [pc, #144]	; (8001a60 <HAL_RCC_OscConfig+0x634>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fa74 	bl	8000ec0 <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff fa6f 	bl	8000ec0 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e02c      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	049b      	lsls	r3, r3, #18
 80019f8:	4013      	ands	r3, r2
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x5b2>
 80019fc:	e024      	b.n	8001a48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e01f      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_RCC_OscConfig+0x628>)
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	23c0      	movs	r3, #192	; 0xc0
 8001a1a:	025b      	lsls	r3, r3, #9
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d10e      	bne.n	8001a44 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	220f      	movs	r2, #15
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d107      	bne.n	8001a44 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	23f0      	movs	r3, #240	; 0xf0
 8001a38:	039b      	lsls	r3, r3, #14
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b008      	add	sp, #32
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	40021000 	.word	0x40021000
 8001a58:	00001388 	.word	0x00001388
 8001a5c:	efffffff 	.word	0xefffffff
 8001a60:	feffffff 	.word	0xfeffffff
 8001a64:	ffc27fff 	.word	0xffc27fff

08001a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0b3      	b.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <HAL_RCC_ClockConfig+0x184>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d911      	bls.n	8001aae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b58      	ldr	r3, [pc, #352]	; (8001bec <HAL_RCC_ClockConfig+0x184>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4393      	bics	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	4b55      	ldr	r3, [pc, #340]	; (8001bec <HAL_RCC_ClockConfig+0x184>)
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_ClockConfig+0x184>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e09a      	b.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d015      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2204      	movs	r2, #4
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d006      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001ac8:	21e0      	movs	r1, #224	; 0xe0
 8001aca:	00c9      	lsls	r1, r1, #3
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	22f0      	movs	r2, #240	; 0xf0
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d040      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	029b      	lsls	r3, r3, #10
 8001afe:	4013      	ands	r3, r2
 8001b00:	d114      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e06e      	b.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	049b      	lsls	r3, r3, #18
 8001b16:	4013      	ands	r3, r2
 8001b18:	d108      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e062      	b.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2202      	movs	r2, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e05b      	b.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2203      	movs	r2, #3
 8001b32:	4393      	bics	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7ff f9be 	bl	8000ec0 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	e009      	b.n	8001b5e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4a:	f7ff f9b9 	bl	8000ec0 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <HAL_RCC_ClockConfig+0x18c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e042      	b.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	220c      	movs	r2, #12
 8001b64:	401a      	ands	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1ec      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_RCC_ClockConfig+0x184>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d211      	bcs.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_ClockConfig+0x184>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4393      	bics	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_RCC_ClockConfig+0x184>)
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_RCC_ClockConfig+0x184>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e020      	b.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_RCC_ClockConfig+0x190>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bc0:	f000 f820 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_ClockConfig+0x188>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	220f      	movs	r2, #15
 8001bce:	4013      	ands	r3, r2
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x194>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	40da      	lsrs	r2, r3
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x198>)
 8001bda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff f929 	bl	8000e34 <HAL_InitTick>
  
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b004      	add	sp, #16
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	00001388 	.word	0x00001388
 8001bf8:	fffff8ff 	.word	0xfffff8ff
 8001bfc:	080039f0 	.word	0x080039f0
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	220c      	movs	r2, #12
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x30>
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0x36>
 8001c32:	e02e      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c36:	613b      	str	r3, [r7, #16]
      break;
 8001c38:	e02e      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	0c9b      	lsrs	r3, r3, #18
 8001c3e:	220f      	movs	r2, #15
 8001c40:	4013      	ands	r3, r2
 8001c42:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_RCC_GetSysClockFreq+0xa8>)
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	4013      	ands	r3, r2
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	23c0      	movs	r3, #192	; 0xc0
 8001c5a:	025b      	lsls	r3, r3, #9
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	025b      	lsls	r3, r3, #9
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c6a:	f7fe fa57 	bl	800011c <__udivsi3>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	001a      	movs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4353      	muls	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c7e:	f7fe fa4d 	bl	800011c <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	001a      	movs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4353      	muls	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	613b      	str	r3, [r7, #16]
      break;
 8001c90:	e002      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c94:	613b      	str	r3, [r7, #16]
      break;
 8001c96:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c98:	693b      	ldr	r3, [r7, #16]
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b006      	add	sp, #24
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	007a1200 	.word	0x007a1200
 8001cac:	08003a00 	.word	0x08003a00
 8001cb0:	08003a10 	.word	0x08003a10

08001cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0a8      	b.n	8001e18 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	2382      	movs	r3, #130	; 0x82
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d009      	beq.n	8001cee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
 8001ce0:	e005      	b.n	8001cee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	225d      	movs	r2, #93	; 0x5d
 8001cf8:	5c9b      	ldrb	r3, [r3, r2]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	225c      	movs	r2, #92	; 0x5c
 8001d04:	2100      	movs	r1, #0
 8001d06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7fe ff22 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	225d      	movs	r2, #93	; 0x5d
 8001d14:	2102      	movs	r1, #2
 8001d16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	438a      	bics	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	23e0      	movs	r3, #224	; 0xe0
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d902      	bls.n	8001d3a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e002      	b.n	8001d40 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	015b      	lsls	r3, r3, #5
 8001d3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	23f0      	movs	r3, #240	; 0xf0
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d008      	beq.n	8001d5e <HAL_SPI_Init+0xaa>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	23e0      	movs	r3, #224	; 0xe0
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d002      	beq.n	8001d5e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	2382      	movs	r3, #130	; 0x82
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	2384      	movs	r3, #132	; 0x84
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	400b      	ands	r3, r1
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2102      	movs	r1, #2
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	2101      	movs	r1, #1
 8001d84:	400b      	ands	r3, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6999      	ldr	r1, [r3, #24]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	400b      	ands	r3, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2138      	movs	r1, #56	; 0x38
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	400b      	ands	r3, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	0011      	movs	r1, r2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	2110      	movs	r1, #16
 8001dcc:	400b      	ands	r3, r1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68d9      	ldr	r1, [r3, #12]
 8001dde:	23f0      	movs	r3, #240	; 0xf0
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	400b      	ands	r3, r1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	0011      	movs	r1, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	015b      	lsls	r3, r3, #5
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4907      	ldr	r1, [pc, #28]	; (8001e20 <HAL_SPI_Init+0x16c>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	225d      	movs	r2, #93	; 0x5d
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	fffff7ff 	.word	0xfffff7ff

08001e24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	1dbb      	adds	r3, r7, #6
 8001e32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e34:	231f      	movs	r3, #31
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	225c      	movs	r2, #92	; 0x5c
 8001e40:	5c9b      	ldrb	r3, [r3, r2]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_SPI_Transmit+0x26>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e147      	b.n	80020da <HAL_SPI_Transmit+0x2b6>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	225c      	movs	r2, #92	; 0x5c
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e52:	f7ff f835 	bl	8000ec0 <HAL_GetTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001e5a:	2316      	movs	r3, #22
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	1dba      	adds	r2, r7, #6
 8001e60:	8812      	ldrh	r2, [r2, #0]
 8001e62:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	225d      	movs	r2, #93	; 0x5d
 8001e68:	5c9b      	ldrb	r3, [r3, r2]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d004      	beq.n	8001e7a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001e70:	231f      	movs	r3, #31
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2202      	movs	r2, #2
 8001e76:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e78:	e128      	b.n	80020cc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_SPI_Transmit+0x64>
 8001e80:	1dbb      	adds	r3, r7, #6
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d104      	bne.n	8001e92 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001e88:	231f      	movs	r3, #31
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e90:	e11c      	b.n	80020cc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	225d      	movs	r2, #93	; 0x5d
 8001e96:	2103      	movs	r1, #3
 8001e98:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1dba      	adds	r2, r7, #6
 8001eaa:	8812      	ldrh	r2, [r2, #0]
 8001eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1dba      	adds	r2, r7, #6
 8001eb2:	8812      	ldrh	r2, [r2, #0]
 8001eb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2244      	movs	r2, #68	; 0x44
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2246      	movs	r2, #70	; 0x46
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d110      	bne.n	8001f06 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2140      	movs	r1, #64	; 0x40
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	01c9      	lsls	r1, r1, #7
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d007      	beq.n	8001f24 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2140      	movs	r1, #64	; 0x40
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	23e0      	movs	r3, #224	; 0xe0
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d952      	bls.n	8001fd6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_SPI_Transmit+0x11e>
 8001f38:	2316      	movs	r3, #22
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d143      	bne.n	8001fca <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	881a      	ldrh	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	1c9a      	adds	r2, r3, #2
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f66:	e030      	b.n	8001fca <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d112      	bne.n	8001f9c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	881a      	ldrh	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	1c9a      	adds	r2, r3, #2
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f9a:	e016      	b.n	8001fca <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f9c:	f7fe ff90 	bl	8000ec0 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d802      	bhi.n	8001fb2 <HAL_SPI_Transmit+0x18e>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	d102      	bne.n	8001fb8 <HAL_SPI_Transmit+0x194>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001fb8:	231f      	movs	r3, #31
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	225d      	movs	r2, #93	; 0x5d
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	5499      	strb	r1, [r3, r2]
          goto error;
 8001fc8:	e080      	b.n	80020cc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1c9      	bne.n	8001f68 <HAL_SPI_Transmit+0x144>
 8001fd4:	e053      	b.n	800207e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <HAL_SPI_Transmit+0x1c4>
 8001fde:	2316      	movs	r3, #22
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d145      	bne.n	8002074 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800200e:	e031      	b.n	8002074 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d113      	bne.n	8002046 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002044:	e016      	b.n	8002074 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002046:	f7fe ff3b 	bl	8000ec0 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d802      	bhi.n	800205c <HAL_SPI_Transmit+0x238>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	d102      	bne.n	8002062 <HAL_SPI_Transmit+0x23e>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002062:	231f      	movs	r3, #31
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2203      	movs	r2, #3
 8002068:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	225d      	movs	r2, #93	; 0x5d
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]
          goto error;
 8002072:	e02b      	b.n	80020cc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1c8      	bne.n	8002010 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	6839      	ldr	r1, [r7, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0018      	movs	r0, r3
 8002086:	f000 fcef 	bl	8002a68 <SPI_EndRxTxTransaction>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d002      	beq.n	8002094 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2220      	movs	r2, #32
 8002092:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80020ba:	231f      	movs	r3, #31
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e003      	b.n	80020cc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	225d      	movs	r2, #93	; 0x5d
 80020c8:	2101      	movs	r1, #1
 80020ca:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	225c      	movs	r2, #92	; 0x5c
 80020d0:	2100      	movs	r1, #0
 80020d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80020d4:	231f      	movs	r3, #31
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	781b      	ldrb	r3, [r3, #0]
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b008      	add	sp, #32
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020f4:	2117      	movs	r1, #23
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	225d      	movs	r2, #93	; 0x5d
 8002100:	5c9b      	ldrb	r3, [r3, r2]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d003      	beq.n	8002110 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002108:	187b      	adds	r3, r7, r1
 800210a:	2202      	movs	r2, #2
 800210c:	701a      	strb	r2, [r3, #0]
    goto error;
 800210e:	e12b      	b.n	8002368 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	2382      	movs	r3, #130	; 0x82
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	429a      	cmp	r2, r3
 800211a:	d113      	bne.n	8002144 <HAL_SPI_Receive+0x60>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	225d      	movs	r2, #93	; 0x5d
 8002128:	2104      	movs	r1, #4
 800212a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800212c:	1dbb      	adds	r3, r7, #6
 800212e:	881c      	ldrh	r4, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	0023      	movs	r3, r4
 800213c:	f000 f924 	bl	8002388 <HAL_SPI_TransmitReceive>
 8002140:	0003      	movs	r3, r0
 8002142:	e118      	b.n	8002376 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	225c      	movs	r2, #92	; 0x5c
 8002148:	5c9b      	ldrb	r3, [r3, r2]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_SPI_Receive+0x6e>
 800214e:	2302      	movs	r3, #2
 8002150:	e111      	b.n	8002376 <HAL_SPI_Receive+0x292>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	225c      	movs	r2, #92	; 0x5c
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800215a:	f7fe feb1 	bl	8000ec0 <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_SPI_Receive+0x8c>
 8002168:	1dbb      	adds	r3, r7, #6
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d104      	bne.n	800217a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002170:	2317      	movs	r3, #23
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
    goto error;
 8002178:	e0f6      	b.n	8002368 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	225d      	movs	r2, #93	; 0x5d
 800217e:	2104      	movs	r1, #4
 8002180:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1dba      	adds	r2, r7, #6
 8002192:	2144      	movs	r1, #68	; 0x44
 8002194:	8812      	ldrh	r2, [r2, #0]
 8002196:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1dba      	adds	r2, r7, #6
 800219c:	2146      	movs	r1, #70	; 0x46
 800219e:	8812      	ldrh	r2, [r2, #0]
 80021a0:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	23e0      	movs	r3, #224	; 0xe0
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d908      	bls.n	80021de <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	496a      	ldr	r1, [pc, #424]	; (8002380 <HAL_SPI_Receive+0x29c>)
 80021d8:	400a      	ands	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	e008      	b.n	80021f0 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	0149      	lsls	r1, r1, #5
 80021ec:	430a      	orrs	r2, r1
 80021ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d10f      	bne.n	800221c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2140      	movs	r1, #64	; 0x40
 8002208:	438a      	bics	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	495b      	ldr	r1, [pc, #364]	; (8002384 <HAL_SPI_Receive+0x2a0>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	4013      	ands	r3, r2
 8002226:	2b40      	cmp	r3, #64	; 0x40
 8002228:	d007      	beq.n	800223a <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	23e0      	movs	r3, #224	; 0xe0
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	429a      	cmp	r2, r3
 8002244:	d900      	bls.n	8002248 <HAL_SPI_Receive+0x164>
 8002246:	e071      	b.n	800232c <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002248:	e035      	b.n	80022b6 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	2b01      	cmp	r3, #1
 8002256:	d117      	bne.n	8002288 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	330c      	adds	r3, #12
 800225e:	001a      	movs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	7812      	ldrb	r2, [r2, #0]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2246      	movs	r2, #70	; 0x46
 8002278:	5a9b      	ldrh	r3, [r3, r2]
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b299      	uxth	r1, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2246      	movs	r2, #70	; 0x46
 8002284:	5299      	strh	r1, [r3, r2]
 8002286:	e016      	b.n	80022b6 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002288:	f7fe fe1a 	bl	8000ec0 <HAL_GetTick>
 800228c:	0002      	movs	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d802      	bhi.n	800229e <HAL_SPI_Receive+0x1ba>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_SPI_Receive+0x1c0>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d108      	bne.n	80022b6 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80022a4:	2317      	movs	r3, #23
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2203      	movs	r2, #3
 80022aa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	225d      	movs	r2, #93	; 0x5d
 80022b0:	2101      	movs	r1, #1
 80022b2:	5499      	strb	r1, [r3, r2]
          goto error;
 80022b4:	e058      	b.n	8002368 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2246      	movs	r2, #70	; 0x46
 80022ba:	5a9b      	ldrh	r3, [r3, r2]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1c3      	bne.n	800224a <HAL_SPI_Receive+0x166>
 80022c2:	e039      	b.n	8002338 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d115      	bne.n	80022fe <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	b292      	uxth	r2, r2
 80022de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	1c9a      	adds	r2, r3, #2
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2246      	movs	r2, #70	; 0x46
 80022ee:	5a9b      	ldrh	r3, [r3, r2]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b299      	uxth	r1, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2246      	movs	r2, #70	; 0x46
 80022fa:	5299      	strh	r1, [r3, r2]
 80022fc:	e016      	b.n	800232c <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022fe:	f7fe fddf 	bl	8000ec0 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d802      	bhi.n	8002314 <HAL_SPI_Receive+0x230>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_SPI_Receive+0x236>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800231a:	2317      	movs	r3, #23
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2203      	movs	r2, #3
 8002320:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	225d      	movs	r2, #93	; 0x5d
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]
          goto error;
 800232a:	e01d      	b.n	8002368 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2246      	movs	r2, #70	; 0x46
 8002330:	5a9b      	ldrh	r3, [r3, r2]
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1c5      	bne.n	80022c4 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 fb34 	bl	80029ac <SPI_EndRxTransaction>
 8002344:	1e03      	subs	r3, r0, #0
 8002346:	d002      	beq.n	800234e <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002356:	2317      	movs	r3, #23
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e003      	b.n	8002368 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	225d      	movs	r2, #93	; 0x5d
 8002364:	2101      	movs	r1, #1
 8002366:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	225c      	movs	r2, #92	; 0x5c
 800236c:	2100      	movs	r1, #0
 800236e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002370:	2317      	movs	r3, #23
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	781b      	ldrb	r3, [r3, #0]
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b007      	add	sp, #28
 800237c:	bd90      	pop	{r4, r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	ffffefff 	.word	0xffffefff
 8002384:	ffffbfff 	.word	0xffffbfff

08002388 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	001a      	movs	r2, r3
 8002396:	1cbb      	adds	r3, r7, #2
 8002398:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800239a:	2301      	movs	r3, #1
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800239e:	2323      	movs	r3, #35	; 0x23
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	225c      	movs	r2, #92	; 0x5c
 80023aa:	5c9b      	ldrb	r3, [r3, r2]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x2c>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e1c4      	b.n	800273e <HAL_SPI_TransmitReceive+0x3b6>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	225c      	movs	r2, #92	; 0x5c
 80023b8:	2101      	movs	r1, #1
 80023ba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023bc:	f7fe fd80 	bl	8000ec0 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023c4:	201b      	movs	r0, #27
 80023c6:	183b      	adds	r3, r7, r0
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	215d      	movs	r1, #93	; 0x5d
 80023cc:	5c52      	ldrb	r2, [r2, r1]
 80023ce:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80023d6:	2312      	movs	r3, #18
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	1cba      	adds	r2, r7, #2
 80023dc:	8812      	ldrh	r2, [r2, #0]
 80023de:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023e0:	183b      	adds	r3, r7, r0
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d011      	beq.n	800240c <HAL_SPI_TransmitReceive+0x84>
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	2382      	movs	r3, #130	; 0x82
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d107      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x7a>
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d004      	beq.n	800240c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002402:	2323      	movs	r3, #35	; 0x23
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
    goto error;
 800240a:	e191      	b.n	8002730 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_SPI_TransmitReceive+0x98>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_SPI_TransmitReceive+0x98>
 8002418:	1cbb      	adds	r3, r7, #2
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002420:	2323      	movs	r3, #35	; 0x23
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
    goto error;
 8002428:	e182      	b.n	8002730 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	225d      	movs	r2, #93	; 0x5d
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b04      	cmp	r3, #4
 8002434:	d003      	beq.n	800243e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	225d      	movs	r2, #93	; 0x5d
 800243a:	2105      	movs	r1, #5
 800243c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1cba      	adds	r2, r7, #2
 800244e:	2146      	movs	r1, #70	; 0x46
 8002450:	8812      	ldrh	r2, [r2, #0]
 8002452:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1cba      	adds	r2, r7, #2
 8002458:	2144      	movs	r1, #68	; 0x44
 800245a:	8812      	ldrh	r2, [r2, #0]
 800245c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1cba      	adds	r2, r7, #2
 8002468:	8812      	ldrh	r2, [r2, #0]
 800246a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1cba      	adds	r2, r7, #2
 8002470:	8812      	ldrh	r2, [r2, #0]
 8002472:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	23e0      	movs	r3, #224	; 0xe0
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	429a      	cmp	r2, r3
 800248a:	d908      	bls.n	800249e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	49ac      	ldr	r1, [pc, #688]	; (8002748 <HAL_SPI_TransmitReceive+0x3c0>)
 8002498:	400a      	ands	r2, r1
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	e008      	b.n	80024b0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	0149      	lsls	r1, r1, #5
 80024ac:	430a      	orrs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d007      	beq.n	80024ce <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2140      	movs	r1, #64	; 0x40
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	23e0      	movs	r3, #224	; 0xe0
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d800      	bhi.n	80024dc <HAL_SPI_TransmitReceive+0x154>
 80024da:	e083      	b.n	80025e4 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_SPI_TransmitReceive+0x168>
 80024e4:	2312      	movs	r3, #18
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d000      	beq.n	80024f0 <HAL_SPI_TransmitReceive+0x168>
 80024ee:	e06d      	b.n	80025cc <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	881a      	ldrh	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002514:	e05a      	b.n	80025cc <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2202      	movs	r2, #2
 800251e:	4013      	ands	r3, r2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d11b      	bne.n	800255c <HAL_SPI_TransmitReceive+0x1d4>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <HAL_SPI_TransmitReceive+0x1d4>
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	2b01      	cmp	r3, #1
 8002532:	d113      	bne.n	800255c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	881a      	ldrh	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	1c9a      	adds	r2, r3, #2
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2201      	movs	r2, #1
 8002564:	4013      	ands	r3, r2
 8002566:	2b01      	cmp	r3, #1
 8002568:	d11c      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x21c>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2246      	movs	r2, #70	; 0x46
 800256e:	5a9b      	ldrh	r3, [r3, r2]
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	b292      	uxth	r2, r2
 8002582:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	1c9a      	adds	r2, r3, #2
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2246      	movs	r2, #70	; 0x46
 8002592:	5a9b      	ldrh	r3, [r3, r2]
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b299      	uxth	r1, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2246      	movs	r2, #70	; 0x46
 800259e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025a0:	2301      	movs	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025a4:	f7fe fc8c 	bl	8000ec0 <HAL_GetTick>
 80025a8:	0002      	movs	r2, r0
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d80b      	bhi.n	80025cc <HAL_SPI_TransmitReceive+0x244>
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	3301      	adds	r3, #1
 80025b8:	d008      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80025ba:	2323      	movs	r3, #35	; 0x23
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2203      	movs	r2, #3
 80025c0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	225d      	movs	r2, #93	; 0x5d
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
        goto error;
 80025ca:	e0b1      	b.n	8002730 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d19f      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x18e>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2246      	movs	r2, #70	; 0x46
 80025da:	5a9b      	ldrh	r3, [r3, r2]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d199      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x18e>
 80025e2:	e089      	b.n	80026f8 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x270>
 80025ec:	2312      	movs	r3, #18
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d000      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x270>
 80025f6:	e074      	b.n	80026e2 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800261e:	e060      	b.n	80026e2 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d11c      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x2e0>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d017      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x2e0>
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	2b01      	cmp	r3, #1
 800263c:	d114      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	330c      	adds	r3, #12
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2201      	movs	r2, #1
 8002670:	4013      	ands	r3, r2
 8002672:	2b01      	cmp	r3, #1
 8002674:	d11e      	bne.n	80026b4 <HAL_SPI_TransmitReceive+0x32c>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2246      	movs	r2, #70	; 0x46
 800267a:	5a9b      	ldrh	r3, [r3, r2]
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	001a      	movs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	7812      	ldrb	r2, [r2, #0]
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2246      	movs	r2, #70	; 0x46
 80026a2:	5a9b      	ldrh	r3, [r3, r2]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b299      	uxth	r1, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2246      	movs	r2, #70	; 0x46
 80026ae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026b0:	2301      	movs	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026b4:	f7fe fc04 	bl	8000ec0 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d802      	bhi.n	80026ca <HAL_SPI_TransmitReceive+0x342>
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	3301      	adds	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x348>
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d108      	bne.n	80026e2 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80026d0:	2323      	movs	r3, #35	; 0x23
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2203      	movs	r2, #3
 80026d6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	225d      	movs	r2, #93	; 0x5d
 80026dc:	2101      	movs	r1, #1
 80026de:	5499      	strb	r1, [r3, r2]
        goto error;
 80026e0:	e026      	b.n	8002730 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d199      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x298>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2246      	movs	r2, #70	; 0x46
 80026f0:	5a9b      	ldrh	r3, [r3, r2]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d193      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f9b2 	bl	8002a68 <SPI_EndRxTxTransaction>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d006      	beq.n	8002716 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002708:	2323      	movs	r3, #35	; 0x23
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	2b00      	cmp	r3, #0
 800271c:	d004      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800271e:	2323      	movs	r3, #35	; 0x23
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e003      	b.n	8002730 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	225d      	movs	r2, #93	; 0x5d
 800272c:	2101      	movs	r1, #1
 800272e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	225c      	movs	r2, #92	; 0x5c
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002738:	2323      	movs	r3, #35	; 0x23
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	781b      	ldrb	r3, [r3, #0]
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b00a      	add	sp, #40	; 0x28
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	ffffefff 	.word	0xffffefff

0800274c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800275c:	f7fe fbb0 	bl	8000ec0 <HAL_GetTick>
 8002760:	0002      	movs	r2, r0
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	18d3      	adds	r3, r2, r3
 800276a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800276c:	f7fe fba8 	bl	8000ec0 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002774:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	015b      	lsls	r3, r3, #5
 800277a:	0d1b      	lsrs	r3, r3, #20
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	4353      	muls	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002782:	e058      	b.n	8002836 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	d055      	beq.n	8002836 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800278a:	f7fe fb99 	bl	8000ec0 <HAL_GetTick>
 800278e:	0002      	movs	r2, r0
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	429a      	cmp	r2, r3
 8002798:	d902      	bls.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d142      	bne.n	8002826 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	21e0      	movs	r1, #224	; 0xe0
 80027ac:	438a      	bics	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	2382      	movs	r3, #130	; 0x82
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d113      	bne.n	80027e4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d005      	beq.n	80027d4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d107      	bne.n	80027e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2140      	movs	r1, #64	; 0x40
 80027e0:	438a      	bics	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	019b      	lsls	r3, r3, #6
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d110      	bne.n	8002812 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	491a      	ldr	r1, [pc, #104]	; (8002864 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	0189      	lsls	r1, r1, #6
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	225d      	movs	r2, #93	; 0x5d
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	225c      	movs	r2, #92	; 0x5c
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e017      	b.n	8002856 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3b01      	subs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	425a      	negs	r2, r3
 8002846:	4153      	adcs	r3, r2
 8002848:	b2db      	uxtb	r3, r3
 800284a:	001a      	movs	r2, r3
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d197      	bne.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b008      	add	sp, #32
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	20000004 	.word	0x20000004
 8002864:	ffffdfff 	.word	0xffffdfff

08002868 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002876:	2317      	movs	r3, #23
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800287e:	f7fe fb1f 	bl	8000ec0 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	18d3      	adds	r3, r2, r3
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800288e:	f7fe fb17 	bl	8000ec0 <HAL_GetTick>
 8002892:	0003      	movs	r3, r0
 8002894:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	330c      	adds	r3, #12
 800289c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	0013      	movs	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	00da      	lsls	r2, r3, #3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	0d1b      	lsrs	r3, r3, #20
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	4353      	muls	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028b4:	e068      	b.n	8002988 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	23c0      	movs	r3, #192	; 0xc0
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	429a      	cmp	r2, r3
 80028be:	d10a      	bne.n	80028d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	2117      	movs	r1, #23
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	d055      	beq.n	8002988 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028dc:	f7fe faf0 	bl	8000ec0 <HAL_GetTick>
 80028e0:	0002      	movs	r2, r0
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d902      	bls.n	80028f2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d142      	bne.n	8002978 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	21e0      	movs	r1, #224	; 0xe0
 80028fe:	438a      	bics	r2, r1
 8002900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	2382      	movs	r3, #130	; 0x82
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	429a      	cmp	r2, r3
 800290c:	d113      	bne.n	8002936 <SPI_WaitFifoStateUntilTimeout+0xce>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	429a      	cmp	r2, r3
 8002918:	d005      	beq.n	8002926 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	429a      	cmp	r2, r3
 8002924:	d107      	bne.n	8002936 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	438a      	bics	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	429a      	cmp	r2, r3
 8002940:	d110      	bne.n	8002964 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800294e:	400a      	ands	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0189      	lsls	r1, r1, #6
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	225d      	movs	r2, #93	; 0x5d
 8002968:	2101      	movs	r1, #1
 800296a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	225c      	movs	r2, #92	; 0x5c
 8002970:	2100      	movs	r1, #0
 8002972:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e010      	b.n	800299a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	3b01      	subs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d18e      	bne.n	80028b6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b00a      	add	sp, #40	; 0x28
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	20000004 	.word	0x20000004
 80029a8:	ffffdfff 	.word	0xffffdfff

080029ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	2382      	movs	r3, #130	; 0x82
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d113      	bne.n	80029ec <SPI_EndRxTransaction+0x40>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d005      	beq.n	80029dc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	429a      	cmp	r2, r3
 80029da:	d107      	bne.n	80029ec <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	438a      	bics	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	0013      	movs	r3, r2
 80029f6:	2200      	movs	r2, #0
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	f7ff fea7 	bl	800274c <SPI_WaitFlagStateUntilTimeout>
 80029fe:	1e03      	subs	r3, r0, #0
 8002a00:	d007      	beq.n	8002a12 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a06:	2220      	movs	r2, #32
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e026      	b.n	8002a60 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	2382      	movs	r3, #130	; 0x82
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d11f      	bne.n	8002a5e <SPI_EndRxTransaction+0xb2>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d005      	beq.n	8002a36 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d113      	bne.n	8002a5e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	23c0      	movs	r3, #192	; 0xc0
 8002a3a:	00d9      	lsls	r1, r3, #3
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	0013      	movs	r3, r2
 8002a44:	2200      	movs	r2, #0
 8002a46:	f7ff ff0f 	bl	8002868 <SPI_WaitFifoStateUntilTimeout>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d007      	beq.n	8002a5e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a52:	2220      	movs	r2, #32
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e000      	b.n	8002a60 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	23c0      	movs	r3, #192	; 0xc0
 8002a78:	0159      	lsls	r1, r3, #5
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	0013      	movs	r3, r2
 8002a82:	2200      	movs	r2, #0
 8002a84:	f7ff fef0 	bl	8002868 <SPI_WaitFifoStateUntilTimeout>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d007      	beq.n	8002a9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a90:	2220      	movs	r2, #32
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e027      	b.n	8002aec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	0013      	movs	r3, r2
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	f7ff fe4f 	bl	800274c <SPI_WaitFlagStateUntilTimeout>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d007      	beq.n	8002ac2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e014      	b.n	8002aec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	23c0      	movs	r3, #192	; 0xc0
 8002ac6:	00d9      	lsls	r1, r3, #3
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	0013      	movs	r3, r2
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f7ff fec9 	bl	8002868 <SPI_WaitFifoStateUntilTimeout>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d007      	beq.n	8002aea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	2220      	movs	r2, #32
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e000      	b.n	8002aec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b004      	add	sp, #16
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <std>:
 8002af4:	2300      	movs	r3, #0
 8002af6:	b510      	push	{r4, lr}
 8002af8:	0004      	movs	r4, r0
 8002afa:	6003      	str	r3, [r0, #0]
 8002afc:	6043      	str	r3, [r0, #4]
 8002afe:	6083      	str	r3, [r0, #8]
 8002b00:	8181      	strh	r1, [r0, #12]
 8002b02:	6643      	str	r3, [r0, #100]	; 0x64
 8002b04:	81c2      	strh	r2, [r0, #14]
 8002b06:	6103      	str	r3, [r0, #16]
 8002b08:	6143      	str	r3, [r0, #20]
 8002b0a:	6183      	str	r3, [r0, #24]
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	2208      	movs	r2, #8
 8002b10:	305c      	adds	r0, #92	; 0x5c
 8002b12:	f000 f90f 	bl	8002d34 <memset>
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <std+0x50>)
 8002b18:	6224      	str	r4, [r4, #32]
 8002b1a:	6263      	str	r3, [r4, #36]	; 0x24
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <std+0x54>)
 8002b1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <std+0x58>)
 8002b22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <std+0x5c>)
 8002b26:	6323      	str	r3, [r4, #48]	; 0x30
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <std+0x60>)
 8002b2a:	429c      	cmp	r4, r3
 8002b2c:	d005      	beq.n	8002b3a <std+0x46>
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <std+0x64>)
 8002b30:	429c      	cmp	r4, r3
 8002b32:	d002      	beq.n	8002b3a <std+0x46>
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <std+0x68>)
 8002b36:	429c      	cmp	r4, r3
 8002b38:	d103      	bne.n	8002b42 <std+0x4e>
 8002b3a:	0020      	movs	r0, r4
 8002b3c:	3058      	adds	r0, #88	; 0x58
 8002b3e:	f000 f979 	bl	8002e34 <__retarget_lock_init_recursive>
 8002b42:	bd10      	pop	{r4, pc}
 8002b44:	08002c9d 	.word	0x08002c9d
 8002b48:	08002cc5 	.word	0x08002cc5
 8002b4c:	08002cfd 	.word	0x08002cfd
 8002b50:	08002d29 	.word	0x08002d29
 8002b54:	200000f8 	.word	0x200000f8
 8002b58:	20000160 	.word	0x20000160
 8002b5c:	200001c8 	.word	0x200001c8

08002b60 <stdio_exit_handler>:
 8002b60:	b510      	push	{r4, lr}
 8002b62:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <stdio_exit_handler+0x10>)
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <stdio_exit_handler+0x14>)
 8002b66:	4804      	ldr	r0, [pc, #16]	; (8002b78 <stdio_exit_handler+0x18>)
 8002b68:	f000 f86c 	bl	8002c44 <_fwalk_sglue>
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	20000010 	.word	0x20000010
 8002b74:	080036d5 	.word	0x080036d5
 8002b78:	2000001c 	.word	0x2000001c

08002b7c <cleanup_stdio>:
 8002b7c:	6841      	ldr	r1, [r0, #4]
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <cleanup_stdio+0x30>)
 8002b80:	b510      	push	{r4, lr}
 8002b82:	0004      	movs	r4, r0
 8002b84:	4299      	cmp	r1, r3
 8002b86:	d001      	beq.n	8002b8c <cleanup_stdio+0x10>
 8002b88:	f000 fda4 	bl	80036d4 <_fflush_r>
 8002b8c:	68a1      	ldr	r1, [r4, #8]
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <cleanup_stdio+0x34>)
 8002b90:	4299      	cmp	r1, r3
 8002b92:	d002      	beq.n	8002b9a <cleanup_stdio+0x1e>
 8002b94:	0020      	movs	r0, r4
 8002b96:	f000 fd9d 	bl	80036d4 <_fflush_r>
 8002b9a:	68e1      	ldr	r1, [r4, #12]
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <cleanup_stdio+0x38>)
 8002b9e:	4299      	cmp	r1, r3
 8002ba0:	d002      	beq.n	8002ba8 <cleanup_stdio+0x2c>
 8002ba2:	0020      	movs	r0, r4
 8002ba4:	f000 fd96 	bl	80036d4 <_fflush_r>
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	200000f8 	.word	0x200000f8
 8002bb0:	20000160 	.word	0x20000160
 8002bb4:	200001c8 	.word	0x200001c8

08002bb8 <global_stdio_init.part.0>:
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <global_stdio_init.part.0+0x28>)
 8002bbc:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <global_stdio_init.part.0+0x2c>)
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <global_stdio_init.part.0+0x30>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f7ff ff95 	bl	8002af4 <std>
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2109      	movs	r1, #9
 8002bce:	4807      	ldr	r0, [pc, #28]	; (8002bec <global_stdio_init.part.0+0x34>)
 8002bd0:	f7ff ff90 	bl	8002af4 <std>
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	2112      	movs	r1, #18
 8002bd8:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <global_stdio_init.part.0+0x38>)
 8002bda:	f7ff ff8b 	bl	8002af4 <std>
 8002bde:	bd10      	pop	{r4, pc}
 8002be0:	20000230 	.word	0x20000230
 8002be4:	08002b61 	.word	0x08002b61
 8002be8:	200000f8 	.word	0x200000f8
 8002bec:	20000160 	.word	0x20000160
 8002bf0:	200001c8 	.word	0x200001c8

08002bf4 <__sfp_lock_acquire>:
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4802      	ldr	r0, [pc, #8]	; (8002c00 <__sfp_lock_acquire+0xc>)
 8002bf8:	f000 f91d 	bl	8002e36 <__retarget_lock_acquire_recursive>
 8002bfc:	bd10      	pop	{r4, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	20000239 	.word	0x20000239

08002c04 <__sfp_lock_release>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4802      	ldr	r0, [pc, #8]	; (8002c10 <__sfp_lock_release+0xc>)
 8002c08:	f000 f916 	bl	8002e38 <__retarget_lock_release_recursive>
 8002c0c:	bd10      	pop	{r4, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	20000239 	.word	0x20000239

08002c14 <__sinit>:
 8002c14:	b510      	push	{r4, lr}
 8002c16:	0004      	movs	r4, r0
 8002c18:	f7ff ffec 	bl	8002bf4 <__sfp_lock_acquire>
 8002c1c:	6a23      	ldr	r3, [r4, #32]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <__sinit+0x14>
 8002c22:	f7ff ffef 	bl	8002c04 <__sfp_lock_release>
 8002c26:	bd10      	pop	{r4, pc}
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <__sinit+0x28>)
 8002c2a:	6223      	str	r3, [r4, #32]
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <__sinit+0x2c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f6      	bne.n	8002c22 <__sinit+0xe>
 8002c34:	f7ff ffc0 	bl	8002bb8 <global_stdio_init.part.0>
 8002c38:	e7f3      	b.n	8002c22 <__sinit+0xe>
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	08002b7d 	.word	0x08002b7d
 8002c40:	20000230 	.word	0x20000230

08002c44 <_fwalk_sglue>:
 8002c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c46:	0014      	movs	r4, r2
 8002c48:	2600      	movs	r6, #0
 8002c4a:	9000      	str	r0, [sp, #0]
 8002c4c:	9101      	str	r1, [sp, #4]
 8002c4e:	68a5      	ldr	r5, [r4, #8]
 8002c50:	6867      	ldr	r7, [r4, #4]
 8002c52:	3f01      	subs	r7, #1
 8002c54:	d504      	bpl.n	8002c60 <_fwalk_sglue+0x1c>
 8002c56:	6824      	ldr	r4, [r4, #0]
 8002c58:	2c00      	cmp	r4, #0
 8002c5a:	d1f8      	bne.n	8002c4e <_fwalk_sglue+0xa>
 8002c5c:	0030      	movs	r0, r6
 8002c5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c60:	89ab      	ldrh	r3, [r5, #12]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d908      	bls.n	8002c78 <_fwalk_sglue+0x34>
 8002c66:	220e      	movs	r2, #14
 8002c68:	5eab      	ldrsh	r3, [r5, r2]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	d004      	beq.n	8002c78 <_fwalk_sglue+0x34>
 8002c6e:	0029      	movs	r1, r5
 8002c70:	9800      	ldr	r0, [sp, #0]
 8002c72:	9b01      	ldr	r3, [sp, #4]
 8002c74:	4798      	blx	r3
 8002c76:	4306      	orrs	r6, r0
 8002c78:	3568      	adds	r5, #104	; 0x68
 8002c7a:	e7ea      	b.n	8002c52 <_fwalk_sglue+0xe>

08002c7c <iprintf>:
 8002c7c:	b40f      	push	{r0, r1, r2, r3}
 8002c7e:	b507      	push	{r0, r1, r2, lr}
 8002c80:	4905      	ldr	r1, [pc, #20]	; (8002c98 <iprintf+0x1c>)
 8002c82:	ab04      	add	r3, sp, #16
 8002c84:	6808      	ldr	r0, [r1, #0]
 8002c86:	cb04      	ldmia	r3!, {r2}
 8002c88:	6881      	ldr	r1, [r0, #8]
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	f000 f9fc 	bl	8003088 <_vfiprintf_r>
 8002c90:	b003      	add	sp, #12
 8002c92:	bc08      	pop	{r3}
 8002c94:	b004      	add	sp, #16
 8002c96:	4718      	bx	r3
 8002c98:	20000068 	.word	0x20000068

08002c9c <__sread>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	000c      	movs	r4, r1
 8002ca0:	250e      	movs	r5, #14
 8002ca2:	5f49      	ldrsh	r1, [r1, r5]
 8002ca4:	f000 f874 	bl	8002d90 <_read_r>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	db03      	blt.n	8002cb4 <__sread+0x18>
 8002cac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002cae:	181b      	adds	r3, r3, r0
 8002cb0:	6563      	str	r3, [r4, #84]	; 0x54
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	4a02      	ldr	r2, [pc, #8]	; (8002cc0 <__sread+0x24>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	81a3      	strh	r3, [r4, #12]
 8002cbc:	e7f9      	b.n	8002cb2 <__sread+0x16>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	ffffefff 	.word	0xffffefff

08002cc4 <__swrite>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	001f      	movs	r7, r3
 8002cc8:	898b      	ldrh	r3, [r1, #12]
 8002cca:	0005      	movs	r5, r0
 8002ccc:	000c      	movs	r4, r1
 8002cce:	0016      	movs	r6, r2
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	d505      	bpl.n	8002ce0 <__swrite+0x1c>
 8002cd4:	230e      	movs	r3, #14
 8002cd6:	5ec9      	ldrsh	r1, [r1, r3]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f000 f844 	bl	8002d68 <_lseek_r>
 8002ce0:	89a3      	ldrh	r3, [r4, #12]
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <__swrite+0x34>)
 8002ce4:	0028      	movs	r0, r5
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	81a3      	strh	r3, [r4, #12]
 8002cea:	0032      	movs	r2, r6
 8002cec:	230e      	movs	r3, #14
 8002cee:	5ee1      	ldrsh	r1, [r4, r3]
 8002cf0:	003b      	movs	r3, r7
 8002cf2:	f000 f861 	bl	8002db8 <_write_r>
 8002cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf8:	ffffefff 	.word	0xffffefff

08002cfc <__sseek>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	000c      	movs	r4, r1
 8002d00:	250e      	movs	r5, #14
 8002d02:	5f49      	ldrsh	r1, [r1, r5]
 8002d04:	f000 f830 	bl	8002d68 <_lseek_r>
 8002d08:	89a3      	ldrh	r3, [r4, #12]
 8002d0a:	1c42      	adds	r2, r0, #1
 8002d0c:	d103      	bne.n	8002d16 <__sseek+0x1a>
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <__sseek+0x28>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	81a3      	strh	r3, [r4, #12]
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	0152      	lsls	r2, r2, #5
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	81a3      	strh	r3, [r4, #12]
 8002d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8002d20:	e7f8      	b.n	8002d14 <__sseek+0x18>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	ffffefff 	.word	0xffffefff

08002d28 <__sclose>:
 8002d28:	b510      	push	{r4, lr}
 8002d2a:	230e      	movs	r3, #14
 8002d2c:	5ec9      	ldrsh	r1, [r1, r3]
 8002d2e:	f000 f809 	bl	8002d44 <_close_r>
 8002d32:	bd10      	pop	{r4, pc}

08002d34 <memset>:
 8002d34:	0003      	movs	r3, r0
 8002d36:	1882      	adds	r2, r0, r2
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <memset+0xa>
 8002d3c:	4770      	bx	lr
 8002d3e:	7019      	strb	r1, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	e7f9      	b.n	8002d38 <memset+0x4>

08002d44 <_close_r>:
 8002d44:	2300      	movs	r3, #0
 8002d46:	b570      	push	{r4, r5, r6, lr}
 8002d48:	4d06      	ldr	r5, [pc, #24]	; (8002d64 <_close_r+0x20>)
 8002d4a:	0004      	movs	r4, r0
 8002d4c:	0008      	movs	r0, r1
 8002d4e:	602b      	str	r3, [r5, #0]
 8002d50:	f7fd ffca 	bl	8000ce8 <_close>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d103      	bne.n	8002d60 <_close_r+0x1c>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d000      	beq.n	8002d60 <_close_r+0x1c>
 8002d5e:	6023      	str	r3, [r4, #0]
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	20000234 	.word	0x20000234

08002d68 <_lseek_r>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	0004      	movs	r4, r0
 8002d6c:	0008      	movs	r0, r1
 8002d6e:	0011      	movs	r1, r2
 8002d70:	001a      	movs	r2, r3
 8002d72:	2300      	movs	r3, #0
 8002d74:	4d05      	ldr	r5, [pc, #20]	; (8002d8c <_lseek_r+0x24>)
 8002d76:	602b      	str	r3, [r5, #0]
 8002d78:	f7fd ffd7 	bl	8000d2a <_lseek>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d103      	bne.n	8002d88 <_lseek_r+0x20>
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d000      	beq.n	8002d88 <_lseek_r+0x20>
 8002d86:	6023      	str	r3, [r4, #0]
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	20000234 	.word	0x20000234

08002d90 <_read_r>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	0004      	movs	r4, r0
 8002d94:	0008      	movs	r0, r1
 8002d96:	0011      	movs	r1, r2
 8002d98:	001a      	movs	r2, r3
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	4d05      	ldr	r5, [pc, #20]	; (8002db4 <_read_r+0x24>)
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	f7fd ff69 	bl	8000c76 <_read>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d103      	bne.n	8002db0 <_read_r+0x20>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d000      	beq.n	8002db0 <_read_r+0x20>
 8002dae:	6023      	str	r3, [r4, #0]
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	20000234 	.word	0x20000234

08002db8 <_write_r>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	0004      	movs	r4, r0
 8002dbc:	0008      	movs	r0, r1
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4d05      	ldr	r5, [pc, #20]	; (8002ddc <_write_r+0x24>)
 8002dc6:	602b      	str	r3, [r5, #0]
 8002dc8:	f7fd ff72 	bl	8000cb0 <_write>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d103      	bne.n	8002dd8 <_write_r+0x20>
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d000      	beq.n	8002dd8 <_write_r+0x20>
 8002dd6:	6023      	str	r3, [r4, #0]
 8002dd8:	bd70      	pop	{r4, r5, r6, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	20000234 	.word	0x20000234

08002de0 <__errno>:
 8002de0:	4b01      	ldr	r3, [pc, #4]	; (8002de8 <__errno+0x8>)
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	4770      	bx	lr
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	20000068 	.word	0x20000068

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	2600      	movs	r6, #0
 8002df0:	4c0c      	ldr	r4, [pc, #48]	; (8002e24 <__libc_init_array+0x38>)
 8002df2:	4d0d      	ldr	r5, [pc, #52]	; (8002e28 <__libc_init_array+0x3c>)
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	f000 fde3 	bl	80039c8 <_init>
 8002e02:	4c0a      	ldr	r4, [pc, #40]	; (8002e2c <__libc_init_array+0x40>)
 8002e04:	4d0a      	ldr	r5, [pc, #40]	; (8002e30 <__libc_init_array+0x44>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	00b3      	lsls	r3, r6, #2
 8002e12:	58eb      	ldr	r3, [r5, r3]
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	00b3      	lsls	r3, r6, #2
 8002e1c:	58eb      	ldr	r3, [r5, r3]
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08003a54 	.word	0x08003a54
 8002e28:	08003a54 	.word	0x08003a54
 8002e2c:	08003a58 	.word	0x08003a58
 8002e30:	08003a54 	.word	0x08003a54

08002e34 <__retarget_lock_init_recursive>:
 8002e34:	4770      	bx	lr

08002e36 <__retarget_lock_acquire_recursive>:
 8002e36:	4770      	bx	lr

08002e38 <__retarget_lock_release_recursive>:
 8002e38:	4770      	bx	lr
	...

08002e3c <_free_r>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	0005      	movs	r5, r0
 8002e40:	2900      	cmp	r1, #0
 8002e42:	d010      	beq.n	8002e66 <_free_r+0x2a>
 8002e44:	1f0c      	subs	r4, r1, #4
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da00      	bge.n	8002e4e <_free_r+0x12>
 8002e4c:	18e4      	adds	r4, r4, r3
 8002e4e:	0028      	movs	r0, r5
 8002e50:	f000 f8e2 	bl	8003018 <__malloc_lock>
 8002e54:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <_free_r+0x90>)
 8002e56:	6813      	ldr	r3, [r2, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <_free_r+0x2c>
 8002e5c:	6063      	str	r3, [r4, #4]
 8002e5e:	6014      	str	r4, [r2, #0]
 8002e60:	0028      	movs	r0, r5
 8002e62:	f000 f8e1 	bl	8003028 <__malloc_unlock>
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
 8002e68:	42a3      	cmp	r3, r4
 8002e6a:	d908      	bls.n	8002e7e <_free_r+0x42>
 8002e6c:	6820      	ldr	r0, [r4, #0]
 8002e6e:	1821      	adds	r1, r4, r0
 8002e70:	428b      	cmp	r3, r1
 8002e72:	d1f3      	bne.n	8002e5c <_free_r+0x20>
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	1809      	adds	r1, r1, r0
 8002e7a:	6021      	str	r1, [r4, #0]
 8002e7c:	e7ee      	b.n	8002e5c <_free_r+0x20>
 8002e7e:	001a      	movs	r2, r3
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <_free_r+0x4e>
 8002e86:	42a3      	cmp	r3, r4
 8002e88:	d9f9      	bls.n	8002e7e <_free_r+0x42>
 8002e8a:	6811      	ldr	r1, [r2, #0]
 8002e8c:	1850      	adds	r0, r2, r1
 8002e8e:	42a0      	cmp	r0, r4
 8002e90:	d10b      	bne.n	8002eaa <_free_r+0x6e>
 8002e92:	6820      	ldr	r0, [r4, #0]
 8002e94:	1809      	adds	r1, r1, r0
 8002e96:	1850      	adds	r0, r2, r1
 8002e98:	6011      	str	r1, [r2, #0]
 8002e9a:	4283      	cmp	r3, r0
 8002e9c:	d1e0      	bne.n	8002e60 <_free_r+0x24>
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	1841      	adds	r1, r0, r1
 8002ea4:	6011      	str	r1, [r2, #0]
 8002ea6:	6053      	str	r3, [r2, #4]
 8002ea8:	e7da      	b.n	8002e60 <_free_r+0x24>
 8002eaa:	42a0      	cmp	r0, r4
 8002eac:	d902      	bls.n	8002eb4 <_free_r+0x78>
 8002eae:	230c      	movs	r3, #12
 8002eb0:	602b      	str	r3, [r5, #0]
 8002eb2:	e7d5      	b.n	8002e60 <_free_r+0x24>
 8002eb4:	6820      	ldr	r0, [r4, #0]
 8002eb6:	1821      	adds	r1, r4, r0
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d103      	bne.n	8002ec4 <_free_r+0x88>
 8002ebc:	6819      	ldr	r1, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	1809      	adds	r1, r1, r0
 8002ec2:	6021      	str	r1, [r4, #0]
 8002ec4:	6063      	str	r3, [r4, #4]
 8002ec6:	6054      	str	r4, [r2, #4]
 8002ec8:	e7ca      	b.n	8002e60 <_free_r+0x24>
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	2000023c 	.word	0x2000023c

08002ed0 <sbrk_aligned>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4e0f      	ldr	r6, [pc, #60]	; (8002f10 <sbrk_aligned+0x40>)
 8002ed4:	000d      	movs	r5, r1
 8002ed6:	6831      	ldr	r1, [r6, #0]
 8002ed8:	0004      	movs	r4, r0
 8002eda:	2900      	cmp	r1, #0
 8002edc:	d102      	bne.n	8002ee4 <sbrk_aligned+0x14>
 8002ede:	f000 fccb 	bl	8003878 <_sbrk_r>
 8002ee2:	6030      	str	r0, [r6, #0]
 8002ee4:	0029      	movs	r1, r5
 8002ee6:	0020      	movs	r0, r4
 8002ee8:	f000 fcc6 	bl	8003878 <_sbrk_r>
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	d00a      	beq.n	8002f06 <sbrk_aligned+0x36>
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	1cc5      	adds	r5, r0, #3
 8002ef4:	439d      	bics	r5, r3
 8002ef6:	42a8      	cmp	r0, r5
 8002ef8:	d007      	beq.n	8002f0a <sbrk_aligned+0x3a>
 8002efa:	1a29      	subs	r1, r5, r0
 8002efc:	0020      	movs	r0, r4
 8002efe:	f000 fcbb 	bl	8003878 <_sbrk_r>
 8002f02:	3001      	adds	r0, #1
 8002f04:	d101      	bne.n	8002f0a <sbrk_aligned+0x3a>
 8002f06:	2501      	movs	r5, #1
 8002f08:	426d      	negs	r5, r5
 8002f0a:	0028      	movs	r0, r5
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000240 	.word	0x20000240

08002f14 <_malloc_r>:
 8002f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f16:	2203      	movs	r2, #3
 8002f18:	1ccb      	adds	r3, r1, #3
 8002f1a:	4393      	bics	r3, r2
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	0006      	movs	r6, r0
 8002f20:	001f      	movs	r7, r3
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d238      	bcs.n	8002f98 <_malloc_r+0x84>
 8002f26:	270c      	movs	r7, #12
 8002f28:	42b9      	cmp	r1, r7
 8002f2a:	d837      	bhi.n	8002f9c <_malloc_r+0x88>
 8002f2c:	0030      	movs	r0, r6
 8002f2e:	f000 f873 	bl	8003018 <__malloc_lock>
 8002f32:	4b38      	ldr	r3, [pc, #224]	; (8003014 <_malloc_r+0x100>)
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	001c      	movs	r4, r3
 8002f3a:	2c00      	cmp	r4, #0
 8002f3c:	d133      	bne.n	8002fa6 <_malloc_r+0x92>
 8002f3e:	0039      	movs	r1, r7
 8002f40:	0030      	movs	r0, r6
 8002f42:	f7ff ffc5 	bl	8002ed0 <sbrk_aligned>
 8002f46:	0004      	movs	r4, r0
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d15e      	bne.n	800300a <_malloc_r+0xf6>
 8002f4c:	9b00      	ldr	r3, [sp, #0]
 8002f4e:	681c      	ldr	r4, [r3, #0]
 8002f50:	0025      	movs	r5, r4
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	d14e      	bne.n	8002ff4 <_malloc_r+0xe0>
 8002f56:	2c00      	cmp	r4, #0
 8002f58:	d051      	beq.n	8002ffe <_malloc_r+0xea>
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	0029      	movs	r1, r5
 8002f5e:	18e3      	adds	r3, r4, r3
 8002f60:	0030      	movs	r0, r6
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	f000 fc88 	bl	8003878 <_sbrk_r>
 8002f68:	9b01      	ldr	r3, [sp, #4]
 8002f6a:	4283      	cmp	r3, r0
 8002f6c:	d147      	bne.n	8002ffe <_malloc_r+0xea>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	0030      	movs	r0, r6
 8002f72:	1aff      	subs	r7, r7, r3
 8002f74:	0039      	movs	r1, r7
 8002f76:	f7ff ffab 	bl	8002ed0 <sbrk_aligned>
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d03f      	beq.n	8002ffe <_malloc_r+0xea>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	9b00      	ldr	r3, [sp, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d040      	beq.n	800300e <_malloc_r+0xfa>
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	42a2      	cmp	r2, r4
 8002f90:	d133      	bne.n	8002ffa <_malloc_r+0xe6>
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e014      	b.n	8002fc2 <_malloc_r+0xae>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	dac5      	bge.n	8002f28 <_malloc_r+0x14>
 8002f9c:	230c      	movs	r3, #12
 8002f9e:	2500      	movs	r5, #0
 8002fa0:	6033      	str	r3, [r6, #0]
 8002fa2:	0028      	movs	r0, r5
 8002fa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fa6:	6821      	ldr	r1, [r4, #0]
 8002fa8:	1bc9      	subs	r1, r1, r7
 8002faa:	d420      	bmi.n	8002fee <_malloc_r+0xda>
 8002fac:	290b      	cmp	r1, #11
 8002fae:	d918      	bls.n	8002fe2 <_malloc_r+0xce>
 8002fb0:	19e2      	adds	r2, r4, r7
 8002fb2:	6027      	str	r7, [r4, #0]
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	d112      	bne.n	8002fde <_malloc_r+0xca>
 8002fb8:	9b00      	ldr	r3, [sp, #0]
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	6863      	ldr	r3, [r4, #4]
 8002fbe:	6011      	str	r1, [r2, #0]
 8002fc0:	6053      	str	r3, [r2, #4]
 8002fc2:	0030      	movs	r0, r6
 8002fc4:	0025      	movs	r5, r4
 8002fc6:	f000 f82f 	bl	8003028 <__malloc_unlock>
 8002fca:	2207      	movs	r2, #7
 8002fcc:	350b      	adds	r5, #11
 8002fce:	1d23      	adds	r3, r4, #4
 8002fd0:	4395      	bics	r5, r2
 8002fd2:	1aea      	subs	r2, r5, r3
 8002fd4:	429d      	cmp	r5, r3
 8002fd6:	d0e4      	beq.n	8002fa2 <_malloc_r+0x8e>
 8002fd8:	1b5b      	subs	r3, r3, r5
 8002fda:	50a3      	str	r3, [r4, r2]
 8002fdc:	e7e1      	b.n	8002fa2 <_malloc_r+0x8e>
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	e7ec      	b.n	8002fbc <_malloc_r+0xa8>
 8002fe2:	6862      	ldr	r2, [r4, #4]
 8002fe4:	42a3      	cmp	r3, r4
 8002fe6:	d1d5      	bne.n	8002f94 <_malloc_r+0x80>
 8002fe8:	9b00      	ldr	r3, [sp, #0]
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e7e9      	b.n	8002fc2 <_malloc_r+0xae>
 8002fee:	0023      	movs	r3, r4
 8002ff0:	6864      	ldr	r4, [r4, #4]
 8002ff2:	e7a2      	b.n	8002f3a <_malloc_r+0x26>
 8002ff4:	002c      	movs	r4, r5
 8002ff6:	686d      	ldr	r5, [r5, #4]
 8002ff8:	e7ab      	b.n	8002f52 <_malloc_r+0x3e>
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	e7c4      	b.n	8002f88 <_malloc_r+0x74>
 8002ffe:	230c      	movs	r3, #12
 8003000:	0030      	movs	r0, r6
 8003002:	6033      	str	r3, [r6, #0]
 8003004:	f000 f810 	bl	8003028 <__malloc_unlock>
 8003008:	e7cb      	b.n	8002fa2 <_malloc_r+0x8e>
 800300a:	6027      	str	r7, [r4, #0]
 800300c:	e7d9      	b.n	8002fc2 <_malloc_r+0xae>
 800300e:	605b      	str	r3, [r3, #4]
 8003010:	deff      	udf	#255	; 0xff
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	2000023c 	.word	0x2000023c

08003018 <__malloc_lock>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4802      	ldr	r0, [pc, #8]	; (8003024 <__malloc_lock+0xc>)
 800301c:	f7ff ff0b 	bl	8002e36 <__retarget_lock_acquire_recursive>
 8003020:	bd10      	pop	{r4, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	20000238 	.word	0x20000238

08003028 <__malloc_unlock>:
 8003028:	b510      	push	{r4, lr}
 800302a:	4802      	ldr	r0, [pc, #8]	; (8003034 <__malloc_unlock+0xc>)
 800302c:	f7ff ff04 	bl	8002e38 <__retarget_lock_release_recursive>
 8003030:	bd10      	pop	{r4, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	20000238 	.word	0x20000238

08003038 <__sfputc_r>:
 8003038:	6893      	ldr	r3, [r2, #8]
 800303a:	b510      	push	{r4, lr}
 800303c:	3b01      	subs	r3, #1
 800303e:	6093      	str	r3, [r2, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	da04      	bge.n	800304e <__sfputc_r+0x16>
 8003044:	6994      	ldr	r4, [r2, #24]
 8003046:	42a3      	cmp	r3, r4
 8003048:	db07      	blt.n	800305a <__sfputc_r+0x22>
 800304a:	290a      	cmp	r1, #10
 800304c:	d005      	beq.n	800305a <__sfputc_r+0x22>
 800304e:	6813      	ldr	r3, [r2, #0]
 8003050:	1c58      	adds	r0, r3, #1
 8003052:	6010      	str	r0, [r2, #0]
 8003054:	7019      	strb	r1, [r3, #0]
 8003056:	0008      	movs	r0, r1
 8003058:	bd10      	pop	{r4, pc}
 800305a:	f000 fb66 	bl	800372a <__swbuf_r>
 800305e:	0001      	movs	r1, r0
 8003060:	e7f9      	b.n	8003056 <__sfputc_r+0x1e>

08003062 <__sfputs_r>:
 8003062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003064:	0006      	movs	r6, r0
 8003066:	000f      	movs	r7, r1
 8003068:	0014      	movs	r4, r2
 800306a:	18d5      	adds	r5, r2, r3
 800306c:	42ac      	cmp	r4, r5
 800306e:	d101      	bne.n	8003074 <__sfputs_r+0x12>
 8003070:	2000      	movs	r0, #0
 8003072:	e007      	b.n	8003084 <__sfputs_r+0x22>
 8003074:	7821      	ldrb	r1, [r4, #0]
 8003076:	003a      	movs	r2, r7
 8003078:	0030      	movs	r0, r6
 800307a:	f7ff ffdd 	bl	8003038 <__sfputc_r>
 800307e:	3401      	adds	r4, #1
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d1f3      	bne.n	800306c <__sfputs_r+0xa>
 8003084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003088 <_vfiprintf_r>:
 8003088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308a:	b0a1      	sub	sp, #132	; 0x84
 800308c:	000f      	movs	r7, r1
 800308e:	0015      	movs	r5, r2
 8003090:	001e      	movs	r6, r3
 8003092:	9003      	str	r0, [sp, #12]
 8003094:	2800      	cmp	r0, #0
 8003096:	d004      	beq.n	80030a2 <_vfiprintf_r+0x1a>
 8003098:	6a03      	ldr	r3, [r0, #32]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <_vfiprintf_r+0x1a>
 800309e:	f7ff fdb9 	bl	8002c14 <__sinit>
 80030a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a4:	07db      	lsls	r3, r3, #31
 80030a6:	d405      	bmi.n	80030b4 <_vfiprintf_r+0x2c>
 80030a8:	89bb      	ldrh	r3, [r7, #12]
 80030aa:	059b      	lsls	r3, r3, #22
 80030ac:	d402      	bmi.n	80030b4 <_vfiprintf_r+0x2c>
 80030ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80030b0:	f7ff fec1 	bl	8002e36 <__retarget_lock_acquire_recursive>
 80030b4:	89bb      	ldrh	r3, [r7, #12]
 80030b6:	071b      	lsls	r3, r3, #28
 80030b8:	d502      	bpl.n	80030c0 <_vfiprintf_r+0x38>
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d113      	bne.n	80030e8 <_vfiprintf_r+0x60>
 80030c0:	0039      	movs	r1, r7
 80030c2:	9803      	ldr	r0, [sp, #12]
 80030c4:	f000 fb74 	bl	80037b0 <__swsetup_r>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d00d      	beq.n	80030e8 <_vfiprintf_r+0x60>
 80030cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ce:	07db      	lsls	r3, r3, #31
 80030d0:	d503      	bpl.n	80030da <_vfiprintf_r+0x52>
 80030d2:	2001      	movs	r0, #1
 80030d4:	4240      	negs	r0, r0
 80030d6:	b021      	add	sp, #132	; 0x84
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030da:	89bb      	ldrh	r3, [r7, #12]
 80030dc:	059b      	lsls	r3, r3, #22
 80030de:	d4f8      	bmi.n	80030d2 <_vfiprintf_r+0x4a>
 80030e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80030e2:	f7ff fea9 	bl	8002e38 <__retarget_lock_release_recursive>
 80030e6:	e7f4      	b.n	80030d2 <_vfiprintf_r+0x4a>
 80030e8:	2300      	movs	r3, #0
 80030ea:	ac08      	add	r4, sp, #32
 80030ec:	6163      	str	r3, [r4, #20]
 80030ee:	3320      	adds	r3, #32
 80030f0:	7663      	strb	r3, [r4, #25]
 80030f2:	3310      	adds	r3, #16
 80030f4:	76a3      	strb	r3, [r4, #26]
 80030f6:	9607      	str	r6, [sp, #28]
 80030f8:	002e      	movs	r6, r5
 80030fa:	7833      	ldrb	r3, [r6, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <_vfiprintf_r+0x7c>
 8003100:	2b25      	cmp	r3, #37	; 0x25
 8003102:	d148      	bne.n	8003196 <_vfiprintf_r+0x10e>
 8003104:	1b73      	subs	r3, r6, r5
 8003106:	9305      	str	r3, [sp, #20]
 8003108:	42ae      	cmp	r6, r5
 800310a:	d00b      	beq.n	8003124 <_vfiprintf_r+0x9c>
 800310c:	002a      	movs	r2, r5
 800310e:	0039      	movs	r1, r7
 8003110:	9803      	ldr	r0, [sp, #12]
 8003112:	f7ff ffa6 	bl	8003062 <__sfputs_r>
 8003116:	3001      	adds	r0, #1
 8003118:	d100      	bne.n	800311c <_vfiprintf_r+0x94>
 800311a:	e0af      	b.n	800327c <_vfiprintf_r+0x1f4>
 800311c:	6963      	ldr	r3, [r4, #20]
 800311e:	9a05      	ldr	r2, [sp, #20]
 8003120:	189b      	adds	r3, r3, r2
 8003122:	6163      	str	r3, [r4, #20]
 8003124:	7833      	ldrb	r3, [r6, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d100      	bne.n	800312c <_vfiprintf_r+0xa4>
 800312a:	e0a7      	b.n	800327c <_vfiprintf_r+0x1f4>
 800312c:	2201      	movs	r2, #1
 800312e:	2300      	movs	r3, #0
 8003130:	4252      	negs	r2, r2
 8003132:	6062      	str	r2, [r4, #4]
 8003134:	a904      	add	r1, sp, #16
 8003136:	3254      	adds	r2, #84	; 0x54
 8003138:	1852      	adds	r2, r2, r1
 800313a:	1c75      	adds	r5, r6, #1
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	60e3      	str	r3, [r4, #12]
 8003140:	60a3      	str	r3, [r4, #8]
 8003142:	7013      	strb	r3, [r2, #0]
 8003144:	65a3      	str	r3, [r4, #88]	; 0x58
 8003146:	4b59      	ldr	r3, [pc, #356]	; (80032ac <_vfiprintf_r+0x224>)
 8003148:	2205      	movs	r2, #5
 800314a:	0018      	movs	r0, r3
 800314c:	7829      	ldrb	r1, [r5, #0]
 800314e:	9305      	str	r3, [sp, #20]
 8003150:	f000 fba4 	bl	800389c <memchr>
 8003154:	1c6e      	adds	r6, r5, #1
 8003156:	2800      	cmp	r0, #0
 8003158:	d11f      	bne.n	800319a <_vfiprintf_r+0x112>
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	06d3      	lsls	r3, r2, #27
 800315e:	d504      	bpl.n	800316a <_vfiprintf_r+0xe2>
 8003160:	2353      	movs	r3, #83	; 0x53
 8003162:	a904      	add	r1, sp, #16
 8003164:	185b      	adds	r3, r3, r1
 8003166:	2120      	movs	r1, #32
 8003168:	7019      	strb	r1, [r3, #0]
 800316a:	0713      	lsls	r3, r2, #28
 800316c:	d504      	bpl.n	8003178 <_vfiprintf_r+0xf0>
 800316e:	2353      	movs	r3, #83	; 0x53
 8003170:	a904      	add	r1, sp, #16
 8003172:	185b      	adds	r3, r3, r1
 8003174:	212b      	movs	r1, #43	; 0x2b
 8003176:	7019      	strb	r1, [r3, #0]
 8003178:	782b      	ldrb	r3, [r5, #0]
 800317a:	2b2a      	cmp	r3, #42	; 0x2a
 800317c:	d016      	beq.n	80031ac <_vfiprintf_r+0x124>
 800317e:	002e      	movs	r6, r5
 8003180:	2100      	movs	r1, #0
 8003182:	200a      	movs	r0, #10
 8003184:	68e3      	ldr	r3, [r4, #12]
 8003186:	7832      	ldrb	r2, [r6, #0]
 8003188:	1c75      	adds	r5, r6, #1
 800318a:	3a30      	subs	r2, #48	; 0x30
 800318c:	2a09      	cmp	r2, #9
 800318e:	d94e      	bls.n	800322e <_vfiprintf_r+0x1a6>
 8003190:	2900      	cmp	r1, #0
 8003192:	d111      	bne.n	80031b8 <_vfiprintf_r+0x130>
 8003194:	e017      	b.n	80031c6 <_vfiprintf_r+0x13e>
 8003196:	3601      	adds	r6, #1
 8003198:	e7af      	b.n	80030fa <_vfiprintf_r+0x72>
 800319a:	9b05      	ldr	r3, [sp, #20]
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	1ac0      	subs	r0, r0, r3
 80031a0:	2301      	movs	r3, #1
 80031a2:	4083      	lsls	r3, r0
 80031a4:	4313      	orrs	r3, r2
 80031a6:	0035      	movs	r5, r6
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	e7cc      	b.n	8003146 <_vfiprintf_r+0xbe>
 80031ac:	9b07      	ldr	r3, [sp, #28]
 80031ae:	1d19      	adds	r1, r3, #4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	9107      	str	r1, [sp, #28]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	db01      	blt.n	80031bc <_vfiprintf_r+0x134>
 80031b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80031ba:	e004      	b.n	80031c6 <_vfiprintf_r+0x13e>
 80031bc:	425b      	negs	r3, r3
 80031be:	60e3      	str	r3, [r4, #12]
 80031c0:	2302      	movs	r3, #2
 80031c2:	4313      	orrs	r3, r2
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	7833      	ldrb	r3, [r6, #0]
 80031c8:	2b2e      	cmp	r3, #46	; 0x2e
 80031ca:	d10a      	bne.n	80031e2 <_vfiprintf_r+0x15a>
 80031cc:	7873      	ldrb	r3, [r6, #1]
 80031ce:	2b2a      	cmp	r3, #42	; 0x2a
 80031d0:	d135      	bne.n	800323e <_vfiprintf_r+0x1b6>
 80031d2:	9b07      	ldr	r3, [sp, #28]
 80031d4:	3602      	adds	r6, #2
 80031d6:	1d1a      	adds	r2, r3, #4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	9207      	str	r2, [sp, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	db2b      	blt.n	8003238 <_vfiprintf_r+0x1b0>
 80031e0:	9309      	str	r3, [sp, #36]	; 0x24
 80031e2:	4d33      	ldr	r5, [pc, #204]	; (80032b0 <_vfiprintf_r+0x228>)
 80031e4:	2203      	movs	r2, #3
 80031e6:	0028      	movs	r0, r5
 80031e8:	7831      	ldrb	r1, [r6, #0]
 80031ea:	f000 fb57 	bl	800389c <memchr>
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d006      	beq.n	8003200 <_vfiprintf_r+0x178>
 80031f2:	2340      	movs	r3, #64	; 0x40
 80031f4:	1b40      	subs	r0, r0, r5
 80031f6:	4083      	lsls	r3, r0
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	3601      	adds	r6, #1
 80031fc:	4313      	orrs	r3, r2
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	7831      	ldrb	r1, [r6, #0]
 8003202:	2206      	movs	r2, #6
 8003204:	482b      	ldr	r0, [pc, #172]	; (80032b4 <_vfiprintf_r+0x22c>)
 8003206:	1c75      	adds	r5, r6, #1
 8003208:	7621      	strb	r1, [r4, #24]
 800320a:	f000 fb47 	bl	800389c <memchr>
 800320e:	2800      	cmp	r0, #0
 8003210:	d043      	beq.n	800329a <_vfiprintf_r+0x212>
 8003212:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <_vfiprintf_r+0x230>)
 8003214:	2b00      	cmp	r3, #0
 8003216:	d125      	bne.n	8003264 <_vfiprintf_r+0x1dc>
 8003218:	2207      	movs	r2, #7
 800321a:	9b07      	ldr	r3, [sp, #28]
 800321c:	3307      	adds	r3, #7
 800321e:	4393      	bics	r3, r2
 8003220:	3308      	adds	r3, #8
 8003222:	9307      	str	r3, [sp, #28]
 8003224:	6963      	ldr	r3, [r4, #20]
 8003226:	9a04      	ldr	r2, [sp, #16]
 8003228:	189b      	adds	r3, r3, r2
 800322a:	6163      	str	r3, [r4, #20]
 800322c:	e764      	b.n	80030f8 <_vfiprintf_r+0x70>
 800322e:	4343      	muls	r3, r0
 8003230:	002e      	movs	r6, r5
 8003232:	2101      	movs	r1, #1
 8003234:	189b      	adds	r3, r3, r2
 8003236:	e7a6      	b.n	8003186 <_vfiprintf_r+0xfe>
 8003238:	2301      	movs	r3, #1
 800323a:	425b      	negs	r3, r3
 800323c:	e7d0      	b.n	80031e0 <_vfiprintf_r+0x158>
 800323e:	2300      	movs	r3, #0
 8003240:	200a      	movs	r0, #10
 8003242:	001a      	movs	r2, r3
 8003244:	3601      	adds	r6, #1
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	7831      	ldrb	r1, [r6, #0]
 800324a:	1c75      	adds	r5, r6, #1
 800324c:	3930      	subs	r1, #48	; 0x30
 800324e:	2909      	cmp	r1, #9
 8003250:	d903      	bls.n	800325a <_vfiprintf_r+0x1d2>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0c5      	beq.n	80031e2 <_vfiprintf_r+0x15a>
 8003256:	9209      	str	r2, [sp, #36]	; 0x24
 8003258:	e7c3      	b.n	80031e2 <_vfiprintf_r+0x15a>
 800325a:	4342      	muls	r2, r0
 800325c:	002e      	movs	r6, r5
 800325e:	2301      	movs	r3, #1
 8003260:	1852      	adds	r2, r2, r1
 8003262:	e7f1      	b.n	8003248 <_vfiprintf_r+0x1c0>
 8003264:	aa07      	add	r2, sp, #28
 8003266:	9200      	str	r2, [sp, #0]
 8003268:	0021      	movs	r1, r4
 800326a:	003a      	movs	r2, r7
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <_vfiprintf_r+0x234>)
 800326e:	9803      	ldr	r0, [sp, #12]
 8003270:	e000      	b.n	8003274 <_vfiprintf_r+0x1ec>
 8003272:	bf00      	nop
 8003274:	9004      	str	r0, [sp, #16]
 8003276:	9b04      	ldr	r3, [sp, #16]
 8003278:	3301      	adds	r3, #1
 800327a:	d1d3      	bne.n	8003224 <_vfiprintf_r+0x19c>
 800327c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327e:	07db      	lsls	r3, r3, #31
 8003280:	d405      	bmi.n	800328e <_vfiprintf_r+0x206>
 8003282:	89bb      	ldrh	r3, [r7, #12]
 8003284:	059b      	lsls	r3, r3, #22
 8003286:	d402      	bmi.n	800328e <_vfiprintf_r+0x206>
 8003288:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800328a:	f7ff fdd5 	bl	8002e38 <__retarget_lock_release_recursive>
 800328e:	89bb      	ldrh	r3, [r7, #12]
 8003290:	065b      	lsls	r3, r3, #25
 8003292:	d500      	bpl.n	8003296 <_vfiprintf_r+0x20e>
 8003294:	e71d      	b.n	80030d2 <_vfiprintf_r+0x4a>
 8003296:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003298:	e71d      	b.n	80030d6 <_vfiprintf_r+0x4e>
 800329a:	aa07      	add	r2, sp, #28
 800329c:	9200      	str	r2, [sp, #0]
 800329e:	0021      	movs	r1, r4
 80032a0:	003a      	movs	r2, r7
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <_vfiprintf_r+0x234>)
 80032a4:	9803      	ldr	r0, [sp, #12]
 80032a6:	f000 f87b 	bl	80033a0 <_printf_i>
 80032aa:	e7e3      	b.n	8003274 <_vfiprintf_r+0x1ec>
 80032ac:	08003a20 	.word	0x08003a20
 80032b0:	08003a26 	.word	0x08003a26
 80032b4:	08003a2a 	.word	0x08003a2a
 80032b8:	00000000 	.word	0x00000000
 80032bc:	08003063 	.word	0x08003063

080032c0 <_printf_common>:
 80032c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032c2:	0016      	movs	r6, r2
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	688a      	ldr	r2, [r1, #8]
 80032c8:	690b      	ldr	r3, [r1, #16]
 80032ca:	000c      	movs	r4, r1
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	4293      	cmp	r3, r2
 80032d0:	da00      	bge.n	80032d4 <_printf_common+0x14>
 80032d2:	0013      	movs	r3, r2
 80032d4:	0022      	movs	r2, r4
 80032d6:	6033      	str	r3, [r6, #0]
 80032d8:	3243      	adds	r2, #67	; 0x43
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	2a00      	cmp	r2, #0
 80032de:	d001      	beq.n	80032e4 <_printf_common+0x24>
 80032e0:	3301      	adds	r3, #1
 80032e2:	6033      	str	r3, [r6, #0]
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	069b      	lsls	r3, r3, #26
 80032e8:	d502      	bpl.n	80032f0 <_printf_common+0x30>
 80032ea:	6833      	ldr	r3, [r6, #0]
 80032ec:	3302      	adds	r3, #2
 80032ee:	6033      	str	r3, [r6, #0]
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	2306      	movs	r3, #6
 80032f4:	0015      	movs	r5, r2
 80032f6:	401d      	ands	r5, r3
 80032f8:	421a      	tst	r2, r3
 80032fa:	d027      	beq.n	800334c <_printf_common+0x8c>
 80032fc:	0023      	movs	r3, r4
 80032fe:	3343      	adds	r3, #67	; 0x43
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	1e5a      	subs	r2, r3, #1
 8003304:	4193      	sbcs	r3, r2
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	0692      	lsls	r2, r2, #26
 800330a:	d430      	bmi.n	800336e <_printf_common+0xae>
 800330c:	0022      	movs	r2, r4
 800330e:	9901      	ldr	r1, [sp, #4]
 8003310:	9800      	ldr	r0, [sp, #0]
 8003312:	9d08      	ldr	r5, [sp, #32]
 8003314:	3243      	adds	r2, #67	; 0x43
 8003316:	47a8      	blx	r5
 8003318:	3001      	adds	r0, #1
 800331a:	d025      	beq.n	8003368 <_printf_common+0xa8>
 800331c:	2206      	movs	r2, #6
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	2500      	movs	r5, #0
 8003322:	4013      	ands	r3, r2
 8003324:	2b04      	cmp	r3, #4
 8003326:	d105      	bne.n	8003334 <_printf_common+0x74>
 8003328:	6833      	ldr	r3, [r6, #0]
 800332a:	68e5      	ldr	r5, [r4, #12]
 800332c:	1aed      	subs	r5, r5, r3
 800332e:	43eb      	mvns	r3, r5
 8003330:	17db      	asrs	r3, r3, #31
 8003332:	401d      	ands	r5, r3
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	6922      	ldr	r2, [r4, #16]
 8003338:	4293      	cmp	r3, r2
 800333a:	dd01      	ble.n	8003340 <_printf_common+0x80>
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	18ed      	adds	r5, r5, r3
 8003340:	2600      	movs	r6, #0
 8003342:	42b5      	cmp	r5, r6
 8003344:	d120      	bne.n	8003388 <_printf_common+0xc8>
 8003346:	2000      	movs	r0, #0
 8003348:	e010      	b.n	800336c <_printf_common+0xac>
 800334a:	3501      	adds	r5, #1
 800334c:	68e3      	ldr	r3, [r4, #12]
 800334e:	6832      	ldr	r2, [r6, #0]
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	42ab      	cmp	r3, r5
 8003354:	ddd2      	ble.n	80032fc <_printf_common+0x3c>
 8003356:	0022      	movs	r2, r4
 8003358:	2301      	movs	r3, #1
 800335a:	9901      	ldr	r1, [sp, #4]
 800335c:	9800      	ldr	r0, [sp, #0]
 800335e:	9f08      	ldr	r7, [sp, #32]
 8003360:	3219      	adds	r2, #25
 8003362:	47b8      	blx	r7
 8003364:	3001      	adds	r0, #1
 8003366:	d1f0      	bne.n	800334a <_printf_common+0x8a>
 8003368:	2001      	movs	r0, #1
 800336a:	4240      	negs	r0, r0
 800336c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800336e:	2030      	movs	r0, #48	; 0x30
 8003370:	18e1      	adds	r1, r4, r3
 8003372:	3143      	adds	r1, #67	; 0x43
 8003374:	7008      	strb	r0, [r1, #0]
 8003376:	0021      	movs	r1, r4
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	3145      	adds	r1, #69	; 0x45
 800337c:	7809      	ldrb	r1, [r1, #0]
 800337e:	18a2      	adds	r2, r4, r2
 8003380:	3243      	adds	r2, #67	; 0x43
 8003382:	3302      	adds	r3, #2
 8003384:	7011      	strb	r1, [r2, #0]
 8003386:	e7c1      	b.n	800330c <_printf_common+0x4c>
 8003388:	0022      	movs	r2, r4
 800338a:	2301      	movs	r3, #1
 800338c:	9901      	ldr	r1, [sp, #4]
 800338e:	9800      	ldr	r0, [sp, #0]
 8003390:	9f08      	ldr	r7, [sp, #32]
 8003392:	321a      	adds	r2, #26
 8003394:	47b8      	blx	r7
 8003396:	3001      	adds	r0, #1
 8003398:	d0e6      	beq.n	8003368 <_printf_common+0xa8>
 800339a:	3601      	adds	r6, #1
 800339c:	e7d1      	b.n	8003342 <_printf_common+0x82>
	...

080033a0 <_printf_i>:
 80033a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a2:	b08b      	sub	sp, #44	; 0x2c
 80033a4:	9206      	str	r2, [sp, #24]
 80033a6:	000a      	movs	r2, r1
 80033a8:	3243      	adds	r2, #67	; 0x43
 80033aa:	9307      	str	r3, [sp, #28]
 80033ac:	9005      	str	r0, [sp, #20]
 80033ae:	9204      	str	r2, [sp, #16]
 80033b0:	7e0a      	ldrb	r2, [r1, #24]
 80033b2:	000c      	movs	r4, r1
 80033b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033b6:	2a78      	cmp	r2, #120	; 0x78
 80033b8:	d809      	bhi.n	80033ce <_printf_i+0x2e>
 80033ba:	2a62      	cmp	r2, #98	; 0x62
 80033bc:	d80b      	bhi.n	80033d6 <_printf_i+0x36>
 80033be:	2a00      	cmp	r2, #0
 80033c0:	d100      	bne.n	80033c4 <_printf_i+0x24>
 80033c2:	e0be      	b.n	8003542 <_printf_i+0x1a2>
 80033c4:	497c      	ldr	r1, [pc, #496]	; (80035b8 <_printf_i+0x218>)
 80033c6:	9103      	str	r1, [sp, #12]
 80033c8:	2a58      	cmp	r2, #88	; 0x58
 80033ca:	d100      	bne.n	80033ce <_printf_i+0x2e>
 80033cc:	e093      	b.n	80034f6 <_printf_i+0x156>
 80033ce:	0026      	movs	r6, r4
 80033d0:	3642      	adds	r6, #66	; 0x42
 80033d2:	7032      	strb	r2, [r6, #0]
 80033d4:	e022      	b.n	800341c <_printf_i+0x7c>
 80033d6:	0010      	movs	r0, r2
 80033d8:	3863      	subs	r0, #99	; 0x63
 80033da:	2815      	cmp	r0, #21
 80033dc:	d8f7      	bhi.n	80033ce <_printf_i+0x2e>
 80033de:	f7fc fe93 	bl	8000108 <__gnu_thumb1_case_shi>
 80033e2:	0016      	.short	0x0016
 80033e4:	fff6001f 	.word	0xfff6001f
 80033e8:	fff6fff6 	.word	0xfff6fff6
 80033ec:	001ffff6 	.word	0x001ffff6
 80033f0:	fff6fff6 	.word	0xfff6fff6
 80033f4:	fff6fff6 	.word	0xfff6fff6
 80033f8:	003600a3 	.word	0x003600a3
 80033fc:	fff60083 	.word	0xfff60083
 8003400:	00b4fff6 	.word	0x00b4fff6
 8003404:	0036fff6 	.word	0x0036fff6
 8003408:	fff6fff6 	.word	0xfff6fff6
 800340c:	0087      	.short	0x0087
 800340e:	0026      	movs	r6, r4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	3642      	adds	r6, #66	; 0x42
 8003414:	1d11      	adds	r1, r2, #4
 8003416:	6019      	str	r1, [r3, #0]
 8003418:	6813      	ldr	r3, [r2, #0]
 800341a:	7033      	strb	r3, [r6, #0]
 800341c:	2301      	movs	r3, #1
 800341e:	e0a2      	b.n	8003566 <_printf_i+0x1c6>
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	6809      	ldr	r1, [r1, #0]
 8003424:	1d02      	adds	r2, r0, #4
 8003426:	060d      	lsls	r5, r1, #24
 8003428:	d50b      	bpl.n	8003442 <_printf_i+0xa2>
 800342a:	6805      	ldr	r5, [r0, #0]
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	2d00      	cmp	r5, #0
 8003430:	da03      	bge.n	800343a <_printf_i+0x9a>
 8003432:	232d      	movs	r3, #45	; 0x2d
 8003434:	9a04      	ldr	r2, [sp, #16]
 8003436:	426d      	negs	r5, r5
 8003438:	7013      	strb	r3, [r2, #0]
 800343a:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <_printf_i+0x218>)
 800343c:	270a      	movs	r7, #10
 800343e:	9303      	str	r3, [sp, #12]
 8003440:	e01b      	b.n	800347a <_printf_i+0xda>
 8003442:	6805      	ldr	r5, [r0, #0]
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	0649      	lsls	r1, r1, #25
 8003448:	d5f1      	bpl.n	800342e <_printf_i+0x8e>
 800344a:	b22d      	sxth	r5, r5
 800344c:	e7ef      	b.n	800342e <_printf_i+0x8e>
 800344e:	680d      	ldr	r5, [r1, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	1d08      	adds	r0, r1, #4
 8003454:	6018      	str	r0, [r3, #0]
 8003456:	062e      	lsls	r6, r5, #24
 8003458:	d501      	bpl.n	800345e <_printf_i+0xbe>
 800345a:	680d      	ldr	r5, [r1, #0]
 800345c:	e003      	b.n	8003466 <_printf_i+0xc6>
 800345e:	066d      	lsls	r5, r5, #25
 8003460:	d5fb      	bpl.n	800345a <_printf_i+0xba>
 8003462:	680d      	ldr	r5, [r1, #0]
 8003464:	b2ad      	uxth	r5, r5
 8003466:	4b54      	ldr	r3, [pc, #336]	; (80035b8 <_printf_i+0x218>)
 8003468:	2708      	movs	r7, #8
 800346a:	9303      	str	r3, [sp, #12]
 800346c:	2a6f      	cmp	r2, #111	; 0x6f
 800346e:	d000      	beq.n	8003472 <_printf_i+0xd2>
 8003470:	3702      	adds	r7, #2
 8003472:	0023      	movs	r3, r4
 8003474:	2200      	movs	r2, #0
 8003476:	3343      	adds	r3, #67	; 0x43
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	60a3      	str	r3, [r4, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	db03      	blt.n	800348a <_printf_i+0xea>
 8003482:	2104      	movs	r1, #4
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	438a      	bics	r2, r1
 8003488:	6022      	str	r2, [r4, #0]
 800348a:	2d00      	cmp	r5, #0
 800348c:	d102      	bne.n	8003494 <_printf_i+0xf4>
 800348e:	9e04      	ldr	r6, [sp, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00c      	beq.n	80034ae <_printf_i+0x10e>
 8003494:	9e04      	ldr	r6, [sp, #16]
 8003496:	0028      	movs	r0, r5
 8003498:	0039      	movs	r1, r7
 800349a:	f7fc fec5 	bl	8000228 <__aeabi_uidivmod>
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	3e01      	subs	r6, #1
 80034a2:	5c5b      	ldrb	r3, [r3, r1]
 80034a4:	7033      	strb	r3, [r6, #0]
 80034a6:	002b      	movs	r3, r5
 80034a8:	0005      	movs	r5, r0
 80034aa:	429f      	cmp	r7, r3
 80034ac:	d9f3      	bls.n	8003496 <_printf_i+0xf6>
 80034ae:	2f08      	cmp	r7, #8
 80034b0:	d109      	bne.n	80034c6 <_printf_i+0x126>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	07db      	lsls	r3, r3, #31
 80034b6:	d506      	bpl.n	80034c6 <_printf_i+0x126>
 80034b8:	6862      	ldr	r2, [r4, #4]
 80034ba:	6923      	ldr	r3, [r4, #16]
 80034bc:	429a      	cmp	r2, r3
 80034be:	dc02      	bgt.n	80034c6 <_printf_i+0x126>
 80034c0:	2330      	movs	r3, #48	; 0x30
 80034c2:	3e01      	subs	r6, #1
 80034c4:	7033      	strb	r3, [r6, #0]
 80034c6:	9b04      	ldr	r3, [sp, #16]
 80034c8:	1b9b      	subs	r3, r3, r6
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	9b07      	ldr	r3, [sp, #28]
 80034ce:	0021      	movs	r1, r4
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	9805      	ldr	r0, [sp, #20]
 80034d4:	9b06      	ldr	r3, [sp, #24]
 80034d6:	aa09      	add	r2, sp, #36	; 0x24
 80034d8:	f7ff fef2 	bl	80032c0 <_printf_common>
 80034dc:	3001      	adds	r0, #1
 80034de:	d147      	bne.n	8003570 <_printf_i+0x1d0>
 80034e0:	2001      	movs	r0, #1
 80034e2:	4240      	negs	r0, r0
 80034e4:	b00b      	add	sp, #44	; 0x2c
 80034e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e8:	2220      	movs	r2, #32
 80034ea:	6809      	ldr	r1, [r1, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	6022      	str	r2, [r4, #0]
 80034f0:	2278      	movs	r2, #120	; 0x78
 80034f2:	4932      	ldr	r1, [pc, #200]	; (80035bc <_printf_i+0x21c>)
 80034f4:	9103      	str	r1, [sp, #12]
 80034f6:	0021      	movs	r1, r4
 80034f8:	3145      	adds	r1, #69	; 0x45
 80034fa:	700a      	strb	r2, [r1, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	c920      	ldmia	r1!, {r5}
 8003502:	0610      	lsls	r0, r2, #24
 8003504:	d402      	bmi.n	800350c <_printf_i+0x16c>
 8003506:	0650      	lsls	r0, r2, #25
 8003508:	d500      	bpl.n	800350c <_printf_i+0x16c>
 800350a:	b2ad      	uxth	r5, r5
 800350c:	6019      	str	r1, [r3, #0]
 800350e:	07d3      	lsls	r3, r2, #31
 8003510:	d502      	bpl.n	8003518 <_printf_i+0x178>
 8003512:	2320      	movs	r3, #32
 8003514:	4313      	orrs	r3, r2
 8003516:	6023      	str	r3, [r4, #0]
 8003518:	2710      	movs	r7, #16
 800351a:	2d00      	cmp	r5, #0
 800351c:	d1a9      	bne.n	8003472 <_printf_i+0xd2>
 800351e:	2220      	movs	r2, #32
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	4393      	bics	r3, r2
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	e7a4      	b.n	8003472 <_printf_i+0xd2>
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	680d      	ldr	r5, [r1, #0]
 800352c:	1d10      	adds	r0, r2, #4
 800352e:	6949      	ldr	r1, [r1, #20]
 8003530:	6018      	str	r0, [r3, #0]
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	062e      	lsls	r6, r5, #24
 8003536:	d501      	bpl.n	800353c <_printf_i+0x19c>
 8003538:	6019      	str	r1, [r3, #0]
 800353a:	e002      	b.n	8003542 <_printf_i+0x1a2>
 800353c:	066d      	lsls	r5, r5, #25
 800353e:	d5fb      	bpl.n	8003538 <_printf_i+0x198>
 8003540:	8019      	strh	r1, [r3, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	9e04      	ldr	r6, [sp, #16]
 8003546:	6123      	str	r3, [r4, #16]
 8003548:	e7c0      	b.n	80034cc <_printf_i+0x12c>
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	1d11      	adds	r1, r2, #4
 800354e:	6019      	str	r1, [r3, #0]
 8003550:	6816      	ldr	r6, [r2, #0]
 8003552:	2100      	movs	r1, #0
 8003554:	0030      	movs	r0, r6
 8003556:	6862      	ldr	r2, [r4, #4]
 8003558:	f000 f9a0 	bl	800389c <memchr>
 800355c:	2800      	cmp	r0, #0
 800355e:	d001      	beq.n	8003564 <_printf_i+0x1c4>
 8003560:	1b80      	subs	r0, r0, r6
 8003562:	6060      	str	r0, [r4, #4]
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	6123      	str	r3, [r4, #16]
 8003568:	2300      	movs	r3, #0
 800356a:	9a04      	ldr	r2, [sp, #16]
 800356c:	7013      	strb	r3, [r2, #0]
 800356e:	e7ad      	b.n	80034cc <_printf_i+0x12c>
 8003570:	0032      	movs	r2, r6
 8003572:	6923      	ldr	r3, [r4, #16]
 8003574:	9906      	ldr	r1, [sp, #24]
 8003576:	9805      	ldr	r0, [sp, #20]
 8003578:	9d07      	ldr	r5, [sp, #28]
 800357a:	47a8      	blx	r5
 800357c:	3001      	adds	r0, #1
 800357e:	d0af      	beq.n	80034e0 <_printf_i+0x140>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	079b      	lsls	r3, r3, #30
 8003584:	d415      	bmi.n	80035b2 <_printf_i+0x212>
 8003586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003588:	68e0      	ldr	r0, [r4, #12]
 800358a:	4298      	cmp	r0, r3
 800358c:	daaa      	bge.n	80034e4 <_printf_i+0x144>
 800358e:	0018      	movs	r0, r3
 8003590:	e7a8      	b.n	80034e4 <_printf_i+0x144>
 8003592:	0022      	movs	r2, r4
 8003594:	2301      	movs	r3, #1
 8003596:	9906      	ldr	r1, [sp, #24]
 8003598:	9805      	ldr	r0, [sp, #20]
 800359a:	9e07      	ldr	r6, [sp, #28]
 800359c:	3219      	adds	r2, #25
 800359e:	47b0      	blx	r6
 80035a0:	3001      	adds	r0, #1
 80035a2:	d09d      	beq.n	80034e0 <_printf_i+0x140>
 80035a4:	3501      	adds	r5, #1
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	42ab      	cmp	r3, r5
 80035ae:	dcf0      	bgt.n	8003592 <_printf_i+0x1f2>
 80035b0:	e7e9      	b.n	8003586 <_printf_i+0x1e6>
 80035b2:	2500      	movs	r5, #0
 80035b4:	e7f7      	b.n	80035a6 <_printf_i+0x206>
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	08003a31 	.word	0x08003a31
 80035bc:	08003a42 	.word	0x08003a42

080035c0 <__sflush_r>:
 80035c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c2:	898b      	ldrh	r3, [r1, #12]
 80035c4:	0005      	movs	r5, r0
 80035c6:	000c      	movs	r4, r1
 80035c8:	071a      	lsls	r2, r3, #28
 80035ca:	d45c      	bmi.n	8003686 <__sflush_r+0xc6>
 80035cc:	684a      	ldr	r2, [r1, #4]
 80035ce:	2a00      	cmp	r2, #0
 80035d0:	dc04      	bgt.n	80035dc <__sflush_r+0x1c>
 80035d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80035d4:	2a00      	cmp	r2, #0
 80035d6:	dc01      	bgt.n	80035dc <__sflush_r+0x1c>
 80035d8:	2000      	movs	r0, #0
 80035da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80035de:	2f00      	cmp	r7, #0
 80035e0:	d0fa      	beq.n	80035d8 <__sflush_r+0x18>
 80035e2:	2200      	movs	r2, #0
 80035e4:	2080      	movs	r0, #128	; 0x80
 80035e6:	682e      	ldr	r6, [r5, #0]
 80035e8:	602a      	str	r2, [r5, #0]
 80035ea:	001a      	movs	r2, r3
 80035ec:	0140      	lsls	r0, r0, #5
 80035ee:	6a21      	ldr	r1, [r4, #32]
 80035f0:	4002      	ands	r2, r0
 80035f2:	4203      	tst	r3, r0
 80035f4:	d034      	beq.n	8003660 <__sflush_r+0xa0>
 80035f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	075b      	lsls	r3, r3, #29
 80035fc:	d506      	bpl.n	800360c <__sflush_r+0x4c>
 80035fe:	6863      	ldr	r3, [r4, #4]
 8003600:	1ac0      	subs	r0, r0, r3
 8003602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <__sflush_r+0x4c>
 8003608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800360a:	1ac0      	subs	r0, r0, r3
 800360c:	0002      	movs	r2, r0
 800360e:	2300      	movs	r3, #0
 8003610:	0028      	movs	r0, r5
 8003612:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003614:	6a21      	ldr	r1, [r4, #32]
 8003616:	47b8      	blx	r7
 8003618:	89a2      	ldrh	r2, [r4, #12]
 800361a:	1c43      	adds	r3, r0, #1
 800361c:	d106      	bne.n	800362c <__sflush_r+0x6c>
 800361e:	6829      	ldr	r1, [r5, #0]
 8003620:	291d      	cmp	r1, #29
 8003622:	d82c      	bhi.n	800367e <__sflush_r+0xbe>
 8003624:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <__sflush_r+0x110>)
 8003626:	410b      	asrs	r3, r1
 8003628:	07db      	lsls	r3, r3, #31
 800362a:	d428      	bmi.n	800367e <__sflush_r+0xbe>
 800362c:	2300      	movs	r3, #0
 800362e:	6063      	str	r3, [r4, #4]
 8003630:	6923      	ldr	r3, [r4, #16]
 8003632:	6023      	str	r3, [r4, #0]
 8003634:	04d2      	lsls	r2, r2, #19
 8003636:	d505      	bpl.n	8003644 <__sflush_r+0x84>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <__sflush_r+0x82>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d100      	bne.n	8003644 <__sflush_r+0x84>
 8003642:	6560      	str	r0, [r4, #84]	; 0x54
 8003644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003646:	602e      	str	r6, [r5, #0]
 8003648:	2900      	cmp	r1, #0
 800364a:	d0c5      	beq.n	80035d8 <__sflush_r+0x18>
 800364c:	0023      	movs	r3, r4
 800364e:	3344      	adds	r3, #68	; 0x44
 8003650:	4299      	cmp	r1, r3
 8003652:	d002      	beq.n	800365a <__sflush_r+0x9a>
 8003654:	0028      	movs	r0, r5
 8003656:	f7ff fbf1 	bl	8002e3c <_free_r>
 800365a:	2000      	movs	r0, #0
 800365c:	6360      	str	r0, [r4, #52]	; 0x34
 800365e:	e7bc      	b.n	80035da <__sflush_r+0x1a>
 8003660:	2301      	movs	r3, #1
 8003662:	0028      	movs	r0, r5
 8003664:	47b8      	blx	r7
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d1c6      	bne.n	80035f8 <__sflush_r+0x38>
 800366a:	682b      	ldr	r3, [r5, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0c3      	beq.n	80035f8 <__sflush_r+0x38>
 8003670:	2b1d      	cmp	r3, #29
 8003672:	d001      	beq.n	8003678 <__sflush_r+0xb8>
 8003674:	2b16      	cmp	r3, #22
 8003676:	d101      	bne.n	800367c <__sflush_r+0xbc>
 8003678:	602e      	str	r6, [r5, #0]
 800367a:	e7ad      	b.n	80035d8 <__sflush_r+0x18>
 800367c:	89a2      	ldrh	r2, [r4, #12]
 800367e:	2340      	movs	r3, #64	; 0x40
 8003680:	4313      	orrs	r3, r2
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	e7a9      	b.n	80035da <__sflush_r+0x1a>
 8003686:	690e      	ldr	r6, [r1, #16]
 8003688:	2e00      	cmp	r6, #0
 800368a:	d0a5      	beq.n	80035d8 <__sflush_r+0x18>
 800368c:	680f      	ldr	r7, [r1, #0]
 800368e:	600e      	str	r6, [r1, #0]
 8003690:	1bba      	subs	r2, r7, r6
 8003692:	9201      	str	r2, [sp, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	079b      	lsls	r3, r3, #30
 8003698:	d100      	bne.n	800369c <__sflush_r+0xdc>
 800369a:	694a      	ldr	r2, [r1, #20]
 800369c:	60a2      	str	r2, [r4, #8]
 800369e:	9b01      	ldr	r3, [sp, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	dd99      	ble.n	80035d8 <__sflush_r+0x18>
 80036a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036a6:	0032      	movs	r2, r6
 80036a8:	001f      	movs	r7, r3
 80036aa:	0028      	movs	r0, r5
 80036ac:	9b01      	ldr	r3, [sp, #4]
 80036ae:	6a21      	ldr	r1, [r4, #32]
 80036b0:	47b8      	blx	r7
 80036b2:	2800      	cmp	r0, #0
 80036b4:	dc06      	bgt.n	80036c4 <__sflush_r+0x104>
 80036b6:	2340      	movs	r3, #64	; 0x40
 80036b8:	2001      	movs	r0, #1
 80036ba:	89a2      	ldrh	r2, [r4, #12]
 80036bc:	4240      	negs	r0, r0
 80036be:	4313      	orrs	r3, r2
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	e78a      	b.n	80035da <__sflush_r+0x1a>
 80036c4:	9b01      	ldr	r3, [sp, #4]
 80036c6:	1836      	adds	r6, r6, r0
 80036c8:	1a1b      	subs	r3, r3, r0
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	e7e7      	b.n	800369e <__sflush_r+0xde>
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	dfbffffe 	.word	0xdfbffffe

080036d4 <_fflush_r>:
 80036d4:	690b      	ldr	r3, [r1, #16]
 80036d6:	b570      	push	{r4, r5, r6, lr}
 80036d8:	0005      	movs	r5, r0
 80036da:	000c      	movs	r4, r1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <_fflush_r+0x12>
 80036e0:	2500      	movs	r5, #0
 80036e2:	0028      	movs	r0, r5
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
 80036e6:	2800      	cmp	r0, #0
 80036e8:	d004      	beq.n	80036f4 <_fflush_r+0x20>
 80036ea:	6a03      	ldr	r3, [r0, #32]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <_fflush_r+0x20>
 80036f0:	f7ff fa90 	bl	8002c14 <__sinit>
 80036f4:	220c      	movs	r2, #12
 80036f6:	5ea3      	ldrsh	r3, [r4, r2]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f1      	beq.n	80036e0 <_fflush_r+0xc>
 80036fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036fe:	07d2      	lsls	r2, r2, #31
 8003700:	d404      	bmi.n	800370c <_fflush_r+0x38>
 8003702:	059b      	lsls	r3, r3, #22
 8003704:	d402      	bmi.n	800370c <_fflush_r+0x38>
 8003706:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003708:	f7ff fb95 	bl	8002e36 <__retarget_lock_acquire_recursive>
 800370c:	0028      	movs	r0, r5
 800370e:	0021      	movs	r1, r4
 8003710:	f7ff ff56 	bl	80035c0 <__sflush_r>
 8003714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003716:	0005      	movs	r5, r0
 8003718:	07db      	lsls	r3, r3, #31
 800371a:	d4e2      	bmi.n	80036e2 <_fflush_r+0xe>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	059b      	lsls	r3, r3, #22
 8003720:	d4df      	bmi.n	80036e2 <_fflush_r+0xe>
 8003722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003724:	f7ff fb88 	bl	8002e38 <__retarget_lock_release_recursive>
 8003728:	e7db      	b.n	80036e2 <_fflush_r+0xe>

0800372a <__swbuf_r>:
 800372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372c:	0006      	movs	r6, r0
 800372e:	000d      	movs	r5, r1
 8003730:	0014      	movs	r4, r2
 8003732:	2800      	cmp	r0, #0
 8003734:	d004      	beq.n	8003740 <__swbuf_r+0x16>
 8003736:	6a03      	ldr	r3, [r0, #32]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <__swbuf_r+0x16>
 800373c:	f7ff fa6a 	bl	8002c14 <__sinit>
 8003740:	69a3      	ldr	r3, [r4, #24]
 8003742:	60a3      	str	r3, [r4, #8]
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	071b      	lsls	r3, r3, #28
 8003748:	d528      	bpl.n	800379c <__swbuf_r+0x72>
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d025      	beq.n	800379c <__swbuf_r+0x72>
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	6820      	ldr	r0, [r4, #0]
 8003754:	b2ef      	uxtb	r7, r5
 8003756:	1ac0      	subs	r0, r0, r3
 8003758:	6963      	ldr	r3, [r4, #20]
 800375a:	b2ed      	uxtb	r5, r5
 800375c:	4283      	cmp	r3, r0
 800375e:	dc05      	bgt.n	800376c <__swbuf_r+0x42>
 8003760:	0021      	movs	r1, r4
 8003762:	0030      	movs	r0, r6
 8003764:	f7ff ffb6 	bl	80036d4 <_fflush_r>
 8003768:	2800      	cmp	r0, #0
 800376a:	d11d      	bne.n	80037a8 <__swbuf_r+0x7e>
 800376c:	68a3      	ldr	r3, [r4, #8]
 800376e:	3001      	adds	r0, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	60a3      	str	r3, [r4, #8]
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	6022      	str	r2, [r4, #0]
 800377a:	701f      	strb	r7, [r3, #0]
 800377c:	6963      	ldr	r3, [r4, #20]
 800377e:	4283      	cmp	r3, r0
 8003780:	d004      	beq.n	800378c <__swbuf_r+0x62>
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	07db      	lsls	r3, r3, #31
 8003786:	d507      	bpl.n	8003798 <__swbuf_r+0x6e>
 8003788:	2d0a      	cmp	r5, #10
 800378a:	d105      	bne.n	8003798 <__swbuf_r+0x6e>
 800378c:	0021      	movs	r1, r4
 800378e:	0030      	movs	r0, r6
 8003790:	f7ff ffa0 	bl	80036d4 <_fflush_r>
 8003794:	2800      	cmp	r0, #0
 8003796:	d107      	bne.n	80037a8 <__swbuf_r+0x7e>
 8003798:	0028      	movs	r0, r5
 800379a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800379c:	0021      	movs	r1, r4
 800379e:	0030      	movs	r0, r6
 80037a0:	f000 f806 	bl	80037b0 <__swsetup_r>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d0d3      	beq.n	8003750 <__swbuf_r+0x26>
 80037a8:	2501      	movs	r5, #1
 80037aa:	426d      	negs	r5, r5
 80037ac:	e7f4      	b.n	8003798 <__swbuf_r+0x6e>
	...

080037b0 <__swsetup_r>:
 80037b0:	4b30      	ldr	r3, [pc, #192]	; (8003874 <__swsetup_r+0xc4>)
 80037b2:	b570      	push	{r4, r5, r6, lr}
 80037b4:	0005      	movs	r5, r0
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	000c      	movs	r4, r1
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d004      	beq.n	80037c8 <__swsetup_r+0x18>
 80037be:	6a03      	ldr	r3, [r0, #32]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <__swsetup_r+0x18>
 80037c4:	f7ff fa26 	bl	8002c14 <__sinit>
 80037c8:	230c      	movs	r3, #12
 80037ca:	5ee2      	ldrsh	r2, [r4, r3]
 80037cc:	b293      	uxth	r3, r2
 80037ce:	0711      	lsls	r1, r2, #28
 80037d0:	d423      	bmi.n	800381a <__swsetup_r+0x6a>
 80037d2:	06d9      	lsls	r1, r3, #27
 80037d4:	d407      	bmi.n	80037e6 <__swsetup_r+0x36>
 80037d6:	2309      	movs	r3, #9
 80037d8:	2001      	movs	r0, #1
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	3337      	adds	r3, #55	; 0x37
 80037de:	4313      	orrs	r3, r2
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	4240      	negs	r0, r0
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	075b      	lsls	r3, r3, #29
 80037e8:	d513      	bpl.n	8003812 <__swsetup_r+0x62>
 80037ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037ec:	2900      	cmp	r1, #0
 80037ee:	d008      	beq.n	8003802 <__swsetup_r+0x52>
 80037f0:	0023      	movs	r3, r4
 80037f2:	3344      	adds	r3, #68	; 0x44
 80037f4:	4299      	cmp	r1, r3
 80037f6:	d002      	beq.n	80037fe <__swsetup_r+0x4e>
 80037f8:	0028      	movs	r0, r5
 80037fa:	f7ff fb1f 	bl	8002e3c <_free_r>
 80037fe:	2300      	movs	r3, #0
 8003800:	6363      	str	r3, [r4, #52]	; 0x34
 8003802:	2224      	movs	r2, #36	; 0x24
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	4393      	bics	r3, r2
 8003808:	81a3      	strh	r3, [r4, #12]
 800380a:	2300      	movs	r3, #0
 800380c:	6063      	str	r3, [r4, #4]
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	2308      	movs	r3, #8
 8003814:	89a2      	ldrh	r2, [r4, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	6923      	ldr	r3, [r4, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <__swsetup_r+0x88>
 8003820:	21a0      	movs	r1, #160	; 0xa0
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	0089      	lsls	r1, r1, #2
 8003828:	0092      	lsls	r2, r2, #2
 800382a:	400b      	ands	r3, r1
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <__swsetup_r+0x88>
 8003830:	0021      	movs	r1, r4
 8003832:	0028      	movs	r0, r5
 8003834:	f000 f866 	bl	8003904 <__smakebuf_r>
 8003838:	220c      	movs	r2, #12
 800383a:	5ea3      	ldrsh	r3, [r4, r2]
 800383c:	2001      	movs	r0, #1
 800383e:	001a      	movs	r2, r3
 8003840:	b299      	uxth	r1, r3
 8003842:	4002      	ands	r2, r0
 8003844:	4203      	tst	r3, r0
 8003846:	d00f      	beq.n	8003868 <__swsetup_r+0xb8>
 8003848:	2200      	movs	r2, #0
 800384a:	60a2      	str	r2, [r4, #8]
 800384c:	6962      	ldr	r2, [r4, #20]
 800384e:	4252      	negs	r2, r2
 8003850:	61a2      	str	r2, [r4, #24]
 8003852:	2000      	movs	r0, #0
 8003854:	6922      	ldr	r2, [r4, #16]
 8003856:	4282      	cmp	r2, r0
 8003858:	d1c4      	bne.n	80037e4 <__swsetup_r+0x34>
 800385a:	0609      	lsls	r1, r1, #24
 800385c:	d5c2      	bpl.n	80037e4 <__swsetup_r+0x34>
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	4313      	orrs	r3, r2
 8003862:	81a3      	strh	r3, [r4, #12]
 8003864:	3801      	subs	r0, #1
 8003866:	e7bd      	b.n	80037e4 <__swsetup_r+0x34>
 8003868:	0788      	lsls	r0, r1, #30
 800386a:	d400      	bmi.n	800386e <__swsetup_r+0xbe>
 800386c:	6962      	ldr	r2, [r4, #20]
 800386e:	60a2      	str	r2, [r4, #8]
 8003870:	e7ef      	b.n	8003852 <__swsetup_r+0xa2>
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	20000068 	.word	0x20000068

08003878 <_sbrk_r>:
 8003878:	2300      	movs	r3, #0
 800387a:	b570      	push	{r4, r5, r6, lr}
 800387c:	4d06      	ldr	r5, [pc, #24]	; (8003898 <_sbrk_r+0x20>)
 800387e:	0004      	movs	r4, r0
 8003880:	0008      	movs	r0, r1
 8003882:	602b      	str	r3, [r5, #0]
 8003884:	f7fd fa5c 	bl	8000d40 <_sbrk>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d103      	bne.n	8003894 <_sbrk_r+0x1c>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d000      	beq.n	8003894 <_sbrk_r+0x1c>
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	bd70      	pop	{r4, r5, r6, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	20000234 	.word	0x20000234

0800389c <memchr>:
 800389c:	b2c9      	uxtb	r1, r1
 800389e:	1882      	adds	r2, r0, r2
 80038a0:	4290      	cmp	r0, r2
 80038a2:	d101      	bne.n	80038a8 <memchr+0xc>
 80038a4:	2000      	movs	r0, #0
 80038a6:	4770      	bx	lr
 80038a8:	7803      	ldrb	r3, [r0, #0]
 80038aa:	428b      	cmp	r3, r1
 80038ac:	d0fb      	beq.n	80038a6 <memchr+0xa>
 80038ae:	3001      	adds	r0, #1
 80038b0:	e7f6      	b.n	80038a0 <memchr+0x4>
	...

080038b4 <__swhatbuf_r>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	000e      	movs	r6, r1
 80038b8:	001d      	movs	r5, r3
 80038ba:	230e      	movs	r3, #14
 80038bc:	5ec9      	ldrsh	r1, [r1, r3]
 80038be:	0014      	movs	r4, r2
 80038c0:	b096      	sub	sp, #88	; 0x58
 80038c2:	2900      	cmp	r1, #0
 80038c4:	da0c      	bge.n	80038e0 <__swhatbuf_r+0x2c>
 80038c6:	89b2      	ldrh	r2, [r6, #12]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	0011      	movs	r1, r2
 80038cc:	4019      	ands	r1, r3
 80038ce:	421a      	tst	r2, r3
 80038d0:	d013      	beq.n	80038fa <__swhatbuf_r+0x46>
 80038d2:	2100      	movs	r1, #0
 80038d4:	3b40      	subs	r3, #64	; 0x40
 80038d6:	2000      	movs	r0, #0
 80038d8:	6029      	str	r1, [r5, #0]
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	b016      	add	sp, #88	; 0x58
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	466a      	mov	r2, sp
 80038e2:	f000 f84d 	bl	8003980 <_fstat_r>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	dbed      	blt.n	80038c6 <__swhatbuf_r+0x12>
 80038ea:	23f0      	movs	r3, #240	; 0xf0
 80038ec:	9901      	ldr	r1, [sp, #4]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	4019      	ands	r1, r3
 80038f2:	4b03      	ldr	r3, [pc, #12]	; (8003900 <__swhatbuf_r+0x4c>)
 80038f4:	18c9      	adds	r1, r1, r3
 80038f6:	424b      	negs	r3, r1
 80038f8:	4159      	adcs	r1, r3
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	e7ea      	b.n	80038d6 <__swhatbuf_r+0x22>
 8003900:	ffffe000 	.word	0xffffe000

08003904 <__smakebuf_r>:
 8003904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003906:	2602      	movs	r6, #2
 8003908:	898b      	ldrh	r3, [r1, #12]
 800390a:	0005      	movs	r5, r0
 800390c:	000c      	movs	r4, r1
 800390e:	4233      	tst	r3, r6
 8003910:	d006      	beq.n	8003920 <__smakebuf_r+0x1c>
 8003912:	0023      	movs	r3, r4
 8003914:	3347      	adds	r3, #71	; 0x47
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	6123      	str	r3, [r4, #16]
 800391a:	2301      	movs	r3, #1
 800391c:	6163      	str	r3, [r4, #20]
 800391e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003920:	466a      	mov	r2, sp
 8003922:	ab01      	add	r3, sp, #4
 8003924:	f7ff ffc6 	bl	80038b4 <__swhatbuf_r>
 8003928:	9900      	ldr	r1, [sp, #0]
 800392a:	0007      	movs	r7, r0
 800392c:	0028      	movs	r0, r5
 800392e:	f7ff faf1 	bl	8002f14 <_malloc_r>
 8003932:	2800      	cmp	r0, #0
 8003934:	d108      	bne.n	8003948 <__smakebuf_r+0x44>
 8003936:	220c      	movs	r2, #12
 8003938:	5ea3      	ldrsh	r3, [r4, r2]
 800393a:	059a      	lsls	r2, r3, #22
 800393c:	d4ef      	bmi.n	800391e <__smakebuf_r+0x1a>
 800393e:	2203      	movs	r2, #3
 8003940:	4393      	bics	r3, r2
 8003942:	431e      	orrs	r6, r3
 8003944:	81a6      	strh	r6, [r4, #12]
 8003946:	e7e4      	b.n	8003912 <__smakebuf_r+0xe>
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	89a2      	ldrh	r2, [r4, #12]
 800394c:	6020      	str	r0, [r4, #0]
 800394e:	4313      	orrs	r3, r2
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	9b00      	ldr	r3, [sp, #0]
 8003954:	6120      	str	r0, [r4, #16]
 8003956:	6163      	str	r3, [r4, #20]
 8003958:	9b01      	ldr	r3, [sp, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <__smakebuf_r+0x74>
 800395e:	0028      	movs	r0, r5
 8003960:	230e      	movs	r3, #14
 8003962:	5ee1      	ldrsh	r1, [r4, r3]
 8003964:	f000 f81e 	bl	80039a4 <_isatty_r>
 8003968:	2800      	cmp	r0, #0
 800396a:	d005      	beq.n	8003978 <__smakebuf_r+0x74>
 800396c:	2303      	movs	r3, #3
 800396e:	89a2      	ldrh	r2, [r4, #12]
 8003970:	439a      	bics	r2, r3
 8003972:	3b02      	subs	r3, #2
 8003974:	4313      	orrs	r3, r2
 8003976:	81a3      	strh	r3, [r4, #12]
 8003978:	89a3      	ldrh	r3, [r4, #12]
 800397a:	433b      	orrs	r3, r7
 800397c:	81a3      	strh	r3, [r4, #12]
 800397e:	e7ce      	b.n	800391e <__smakebuf_r+0x1a>

08003980 <_fstat_r>:
 8003980:	2300      	movs	r3, #0
 8003982:	b570      	push	{r4, r5, r6, lr}
 8003984:	4d06      	ldr	r5, [pc, #24]	; (80039a0 <_fstat_r+0x20>)
 8003986:	0004      	movs	r4, r0
 8003988:	0008      	movs	r0, r1
 800398a:	0011      	movs	r1, r2
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	f7fd f9b5 	bl	8000cfc <_fstat>
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	d103      	bne.n	800399e <_fstat_r+0x1e>
 8003996:	682b      	ldr	r3, [r5, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d000      	beq.n	800399e <_fstat_r+0x1e>
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	20000234 	.word	0x20000234

080039a4 <_isatty_r>:
 80039a4:	2300      	movs	r3, #0
 80039a6:	b570      	push	{r4, r5, r6, lr}
 80039a8:	4d06      	ldr	r5, [pc, #24]	; (80039c4 <_isatty_r+0x20>)
 80039aa:	0004      	movs	r4, r0
 80039ac:	0008      	movs	r0, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fd f9b2 	bl	8000d18 <_isatty>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d103      	bne.n	80039c0 <_isatty_r+0x1c>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d000      	beq.n	80039c0 <_isatty_r+0x1c>
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	bd70      	pop	{r4, r5, r6, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000234 	.word	0x20000234

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr
